{
  "swagger" : "2.0",
  "info" : {
    "description" : "Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.\n\nBy integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for our customers.\n\n\n# Authentication\nEach request to the Multi API needs to be signed with an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).\n\nAlmost all endpoints require a secondary authentication token `Authorization` that represents the user for whom the request is being executed.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "version" : "3.2.1",
    "title" : "Weavr Multi Product API",
    "contact" : {
      "name" : "Weavr",
      "url" : "https://weavr.io"
    },
    "x-WM-USE_PROXY_FOR_WEB" : true,
    "x-WM-USE_PROXY_FOR_MOBILE" : true,
    "x-WM-SERVICE_ID" : "weavrLogin",
    "x-WM-SERVICE_TYPE" : "OpenAPIService",
    "x-WM-USE_WITH_CREDENTIALS" : false
  },
  "host" : "sandbox.weavr.io",
  "basePath" : "",
  "tags" : [ {
    "name" : "Authorised Users",
    "description" : "Corporate and Consumer identities can invite authorised users to access their account. Once on-boarded, authorised users can create and manage instruments and transactions on behalf of the identity they are on-boarded with.\n\nIn case of **Corporate Identities**, authorised users are typically employees who have access to company's banking products such as cards and bank accounts.\n\nIn case of **Consumer Identities**, authorised users are typically children/teens whose parents want them to have access to banking products such as cards and bank accounts.\n\nNote that `/users` endpoints are to be used only for performing operations related to authorised users - getting or updating the details of _root_ users is to be done via the respective `/consumers` or `/corporates` endpoints.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Authorised Users"
  }, {
    "name" : "Consumers",
    "description" : "Consumers are identities representing individuals. Once on-boarded, Consumers can create and manage their own instruments via your application.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Consumers"
  }, {
    "name" : "Corporates",
    "description" : "Corporates are identities representing companies. Once on-boarded, Corporates can create and manage their own instruments via your application.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Corporates"
  }, {
    "name" : "Managed Accounts",
    "description" : "Managed Accounts are a type of financial instrument offered by Weavr.\n\nThey hold funds for their owner, and can be upgraded to IBANs so as to receive and send funds to instruments outside of the Weavr Platform, via Wire Transfers.\n\nManaged accounts can also be used as source and destination instruments in the `transfer` and `send` transactions.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Managed Accounts"
  }, {
    "name" : "Managed Cards",
    "description" : "Managed Cards are a type of financial instrument offered by Weavr.\n\nYou can create virtual or physical cards that are issued to the consumer or corporate identity.\n\nA card created in prepaid mode has its own balance, whereas a card created in debit mode does not have its own balance but taps into the balance of its parent managed account.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Managed Cards"
  }, {
    "name" : "Outgoing Wire Transfers",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Outgoing Wire Transfers"
  }, {
    "name" : "Passwords",
    "description" : "Manage your users' passwords.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Passwords"
  }, {
    "name" : "Sends",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Sends"
  }, {
    "name" : "Transfers",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Transfers"
  }, {
    "name" : "User Authentication",
    "description" : "Manage authentication for your users.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.User Authentication"
  }, {
    "name" : "User Impersonation",
    "description" : "Impersonate authentication for users, to be able to perform allowed back office operations.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.User Impersonation"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/weavrLogin/consumers" : {
      "get" : {
        "tags" : [ "Consumers" ],
        "summary" : "Get consumer",
        "description" : "Retrieve the details of the logged-in Consumer.",
        "operationId" : "weavrLogin_consumerGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Consumer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Create consumer",
        "description" : "Create a Consumer Identity to represent an Individual.\n\nThe information provided must be accurate as it will be passed on for KYC verification with our partner.\n\n*Incorrect information may incur a re-processing fee.*\n",
        "operationId" : "weavrLogin_consumerCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "acceptedTerms", "ipAddress", "profileId", "rootUser" ],
            "properties" : {
              "rootUser" : {
                "type" : "object",
                "description" : "The root user represents the identity.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC, as part of the Consumer's due diligence process.\n",
                "properties" : {
                  "occupation" : {
                    "type" : "object"
                  },
                  "address" : {
                    "type" : "object"
                  },
                  "surname" : {
                    "type" : "string",
                    "description" : "The last name of the root user.",
                    "maxLength" : 20
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The first name of the root user.",
                    "maxLength" : 20
                  },
                  "mobile" : {
                    "$ref" : "#/definitions/Mobile"
                  },
                  "dateOfBirth" : {
                    "type" : "object"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "Valid email address of the root user - this will be verified.",
                    "minLength" : 6,
                    "maxLength" : 255,
                    "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
                  }
                }
              },
              "sourceOfFundsOther" : {
                "type" : "string",
                "description" : "Description of source of funds in case `OTHER` was chosen."
              },
              "acceptedTerms" : {
                "type" : "boolean",
                "description" : "Must be set to *true* to indicate that the consumer has accepted the terms and conditions."
              },
              "profileId" : {
                "type" : "string",
                "description" : "The Consumer Profile Id to be used to create the Consumer.\n\nProfiles contain configuration and determine behavioral aspects of the newly created Consumer, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "ipAddress" : {
                "type" : "string",
                "description" : "The IP address of the user doing the registration.",
                "minLength" : 5,
                "maxLength" : 45
              },
              "sourceOfFunds" : {
                "type" : "object"
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "feeGroup" : {
                "type" : "string",
                "description" : "The fee group which the consumer is bound to. Fee groups provide the possibility of different fees to users under the same profile. If fee groups are not required, ignore this field."
              },
              "baseCurrency" : {
                "type" : "string",
                "description" : "The default currency of the consumer.",
                "minLength" : 3,
                "maxLength" : 3,
                "pattern" : "^[A-Z]*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Consumer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "SOURCE_OF_FUNDS_OTHER_MISSING", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "patch" : {
        "tags" : [ "Consumers" ],
        "summary" : "Update consumer",
        "description" : "Update the details of the logged-in consumer identity.\n\nIf the Consumer root user has already completed KYC, the following details cannot be updated:\n  - name\n  - surname\n  - email\n  - mobile Country Code\n  - mobile Number\n  - date of Birth\n  - address\n",
        "operationId" : "weavrLogin_consumerUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "properties" : {
              "address" : {
                "type" : "object"
              },
              "occupation" : {
                "type" : "object"
              },
              "sourceOfFundsOther" : {
                "type" : "string",
                "description" : "Description of source of funds in case `OTHER` was chosen."
              },
              "surname" : {
                "type" : "string",
                "description" : "The last name of the Consumer root user.",
                "maxLength" : 20,
                "pattern" : "^[^0-9~!@#$%^*()_+={}\\[\\]|:;,<>/?]*$"
              },
              "name" : {
                "type" : "string",
                "description" : "The first name of the Consumer root user.",
                "maxLength" : 20,
                "pattern" : "^[^0-9~!@#$%^*()_+={}\\[\\]|:;,<>/?]*$"
              },
              "mobile" : {
                "$ref" : "#/definitions/Mobile"
              },
              "dateOfBirth" : {
                "type" : "object"
              },
              "sourceOfFunds" : {
                "type" : "object"
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "feeGroup" : {
                "type" : "string",
                "description" : "The fee group which the consumer will be bound to. Do not specify this if you are not using fee groups."
              },
              "email" : {
                "type" : "string",
                "description" : "The email address of the Consumer root user.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              },
              "baseCurrency" : {
                "type" : "string",
                "description" : "The default currency of the consumer.",
                "minLength" : 3,
                "maxLength" : 3,
                "pattern" : "^[A-Z]*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Consumer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "CONSUMER_VERIFIED", "SOURCE_OF_FUNDS_OTHER_MISSING", "EMAIL_NOT_UNIQUE", "MOBILE_NUMBER_MISSING", "COUNTRY_CODE_MISSING", "MOBILE_OR_COUNTRY_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers"
    },
    "/weavrLogin/consumers/fees/charge" : {
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Charge fee to consumer",
        "description" : "Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n",
        "operationId" : "weavrLogin_consumerChargeFee",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "allOf" : [ {
              "$ref" : "#/definitions/Fee"
            }, {
              "type" : "object",
              "description" : "The custom fee to be charged to the consumer."
            } ],
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerChargeFeeRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "UNRESOLVED_FEE_TYPE", "UNRESOLVED_CURRENCY", "UNRESOLVED_INSTRUMENT", "FUNDS_INSUFFICIENT", "IDENTITY_NOT_OWNER_OF_INSTRUMENT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerChargeFee",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/fees/charge",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/fees/charge"
    },
    "/weavrLogin/consumers/kyc" : {
      "get" : {
        "tags" : [ "Consumers" ],
        "summary" : "Get consumer KYC",
        "description" : "Returns the KYC status for the logged-in consumer.",
        "operationId" : "weavrLogin_consumerKycGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "fullDueDiligence" : {
                  "type" : "string",
                  "description" : "The status of the Due Diligence for the consumer.",
                  "enum" : [ "NOT_STARTED", "INITIATED", "PENDING_REVIEW", "APPROVED", "REJECTED" ]
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerKycGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerKycGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Start consumer KYC",
        "description" : "Consumers need to complete due diligence (KYC) before they can create instruments and fund transaction.\n\nThis operation initiates the due diligence process for the logged-in consumer.\n\nDue Diligence is handled by a KYB provider, you will need to embed the KYC UI Component in your application to show the KYC screens to your users.\n\nTo initialise the KYC UI Component, you need a `reference` that is given you in the response of this operation.\n",
        "operationId" : "weavrLogin_consumerKycStart",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "reference" : {
                  "type" : "string",
                  "description" : "The reference used to initialise the KYC UI Component.",
                  "pattern" : "^[0-9]+$"
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerKycStartResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerKycStart",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/kyc",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/kyc"
    },
    "/weavrLogin/consumers/verification/email/send" : {
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Send root user email verification code",
        "description" : "The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user's email address.\n\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrLogin_consumerRootUserEmailVerificationCodeSend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email" ],
            "properties" : {
              "email" : {
                "type" : "string",
                "description" : "Email to be verified.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerRootUserEmailVerificationCodeSendRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerRootUserEmailVerificationCodeSend",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/verification/email/send",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/verification/email/send"
    },
    "/weavrLogin/consumers/verification/email/verify" : {
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Verify root user email",
        "description" : "The second step in verifying the root user's email. The randomly generated code sent to the root user via email, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\nThis is needed as part of the verification process for basic due diligence.\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \"123456\".",
        "operationId" : "weavrLogin_consumerRootUserEmailVerify",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email", "verificationCode" ],
            "properties" : {
              "email" : {
                "type" : "string",
                "description" : "The unique email address to be verified.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              },
              "verificationCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code used to verify the user's email address.",
                "minLength" : 6,
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerRootUserEmailVerifyRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "VERIFICATION_CODE_INVALID", "EMAIL_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerRootUserEmailVerify",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/verification/email/verify",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/verification/email/verify"
    },
    "/weavrLogin/consumers/verification/mobile/send" : {
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Send root user mobile verification code",
        "description" : "The first step in verifying a root user's mobile number. The root user whose mobile number is to be verified is sent a text message containing a randomly generated code.\n\nThis code must then be provided in the _consumerRootUserMobileVerify_ operation to verify the root user's mobile number.\n\nNote that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrLogin_consumerRootUserMobileVerificationCodeSend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/VerificationMobileResponse"
            }
          },
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FREQUENCY_EXCEEDED", "RETRIES_EXCEEDED", "ALREADY_VERIFIED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerRootUserMobileVerificationCodeSend",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/verification/mobile/send",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/verification/mobile/send"
    },
    "/weavrLogin/consumers/verification/mobile/verify" : {
      "post" : {
        "tags" : [ "Consumers" ],
        "summary" : "Verify root user mobile",
        "description" : "The second step in verifying the root user's mobile number. The randomly generated code sent to the root user via\ntext message, using the _consumerRootUserMobileVerificationCodeSend_ operation, is to be submitted here to verify the root user's mobile number.\n\nThis is needed as part of the verification process for basic due diligence.\n\nNote that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\"123456\\\"\n",
        "operationId" : "weavrLogin_consumerRootUserMobileVerify",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "verificationCode" ],
            "properties" : {
              "verificationCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code used to verify the user's mobile number.",
                "minLength" : 6,
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginConsumerRootUserMobileVerifyRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "VERIFICATION_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_consumerRootUserMobileVerify",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Consumers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/consumers",
      "x-WM-RELATIVE_PATH" : "/verification/mobile/verify",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/consumers/verification/mobile/verify"
    },
    "/weavrLogin/corporates" : {
      "get" : {
        "tags" : [ "Corporates" ],
        "summary" : "Get corporate",
        "description" : "Retrieve the details of the logged-in corporate.",
        "operationId" : "weavrLogin_corporateGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Corporate"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Create corporate",
        "description" : "Create a corporate identity for a business customer.  The information provided must be accurate and will be passed on for KYB verification with our partner.",
        "operationId" : "weavrLogin_corporateCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "acceptedTerms", "baseCurrency", "company", "industry", "ipAddress", "profileId", "rootUser", "sourceOfFunds" ],
            "properties" : {
              "rootUser" : {
                "type" : "object",
                "description" : "The root user needs to be a director or a legal representative of the corporate that is being onboarded - this user cannot be deactivated.\n\nRoot users need to verify their email address and mobile number, as well as complete KYC as part of the Corporate's due diligence process.\n",
                "properties" : {
                  "companyPosition" : {
                    "type" : "string",
                    "description" : "The company position of the root user (e.g. Director, CEO, Product Manager, etc.).",
                    "minLength" : 1,
                    "maxLength" : 100
                  },
                  "surname" : {
                    "type" : "string",
                    "description" : "The last name of the root user.",
                    "maxLength" : 20
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The first name of the root user.",
                    "maxLength" : 20
                  },
                  "mobile" : {
                    "$ref" : "#/definitions/Mobile"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "Valid email address of the root user - this will be verified.",
                    "minLength" : 6,
                    "maxLength" : 255,
                    "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
                  }
                }
              },
              "sourceOfFundsOther" : {
                "type" : "string",
                "description" : "Description of source of funds in case `OTHER` was chosen."
              },
              "acceptedTerms" : {
                "type" : "boolean",
                "description" : "Must be set to *true* to indicate that the corporate root user has accepted the terms and conditions."
              },
              "profileId" : {
                "type" : "string",
                "description" : "The Corporate Profile Id to be used to create the Corporate.\n\nProfiles contain configuration and determine behavioral aspects of the newly created Corporate, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "ipAddress" : {
                "type" : "string",
                "description" : "The IP address of the corporate user doing the registration.",
                "minLength" : 5,
                "maxLength" : 45
              },
              "company" : {
                "type" : "object",
                "description" : "The details associated with the company being on-boarded. The details provided need to match exactly with the details provided during KYB. ",
                "properties" : {
                  "registrationNumber" : {
                    "type" : "string",
                    "description" : "The registration number of the company.",
                    "minLength" : 1,
                    "maxLength" : 20
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The registered name of the company.",
                    "maxLength" : 100
                  },
                  "type" : {
                    "$ref" : "#/definitions/CompanyType"
                  },
                  "businessAddress" : {
                    "$ref" : "#/definitions/Address"
                  },
                  "registrationCountry" : {
                    "type" : "string",
                    "description" : "The country of company registration, in ISO 3166 alpha-2 format.",
                    "minLength" : 2,
                    "maxLength" : 2,
                    "pattern" : "^[A-Z]+$"
                  }
                }
              },
              "industry" : {
                "type" : "object"
              },
              "sourceOfFunds" : {
                "type" : "object"
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "feeGroup" : {
                "type" : "string",
                "description" : "Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."
              },
              "baseCurrency" : {
                "type" : "string",
                "description" : "The default currency of the corporate - any totals and limits are calculated in this currency.",
                "minLength" : 3,
                "maxLength" : 3,
                "pattern" : "^[A-Z]*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Corporate"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "SOURCE_OF_FUNDS_OTHER_MISSING", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "patch" : {
        "tags" : [ "Corporates" ],
        "summary" : "Update corporate",
        "description" : "Update the details of the logged-in corporate identity.\n\nThe following Corporate details are verified during due diligence (KYB) and cannot be updated via the API once the Corporate has been verified:\n  - Company Name\n  - Registration Number\n  - Registration Country\n  - Incorporation Date\n  - Root User Name\n  - Root User Surname\n  - Root User Email\n  - Root User Mobile Country Code\n  - Root User Mobile Number\n\n*If these details change after due diligence is completed, please contact Customer Support to restart the Due Diligence process.*\n",
        "operationId" : "weavrLogin_corporateUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "properties" : {
              "sourceOfFundsOther" : {
                "type" : "string",
                "description" : "Description of source of funds in case `OTHER` was chosen."
              },
              "companyType" : {
                "$ref" : "#/definitions/CompanyType"
              },
              "surname" : {
                "type" : "string",
                "description" : "The last name of the Corporate root user.",
                "maxLength" : 20,
                "pattern" : "^[^0-9~!@#$%^*()_+={}\\[\\]|:;,<>/?]*$"
              },
              "name" : {
                "type" : "string",
                "description" : "The first name of the Corporate root user.",
                "maxLength" : 20,
                "pattern" : "^[^0-9~!@#$%^*()_+={}\\[\\]|:;,<>/?]*$"
              },
              "mobile" : {
                "$ref" : "#/definitions/Mobile"
              },
              "industry" : {
                "type" : "object"
              },
              "sourceOfFunds" : {
                "type" : "object"
              },
              "companyBusinessAddress" : {
                "type" : "object"
              },
              "tag" : {
                "type" : "string",
                "description" : "A field for custom tags linked to this corporate.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "feeGroup" : {
                "type" : "string",
                "description" : "The fee group which the Corporate will be bound to. Do not specify this if you are not using fee groups."
              },
              "email" : {
                "type" : "string",
                "description" : "The email address of the Corporate root user.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              },
              "baseCurrency" : {
                "type" : "string",
                "description" : "The default currency of the corporate.",
                "minLength" : 3,
                "maxLength" : 3,
                "pattern" : "^[A-Z]*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Corporate"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "EMAIL_NOT_UNIQUE", "MOBILE_NOT_UNIQUE", "ROOT_USER_ALREADY_VERIFIED", "SOURCE_OF_FUNDS_OTHER_MISSING" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates"
    },
    "/weavrLogin/corporates/fees/charge" : {
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Charge fee to corporate",
        "description" : "Charge a fee to the corporate identified by the auth token, based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n",
        "operationId" : "weavrLogin_corporateChargeFee",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "allOf" : [ {
              "$ref" : "#/definitions/Fee"
            }, {
              "type" : "object",
              "description" : "The custom fee to be charged to the corporate."
            } ],
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateChargeFeeRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "UNRESOLVED_FEE_TYPE", "UNRESOLVED_CURRENCY", "UNRESOLVED_INSTRUMENT", "FUNDS_INSUFFICIENT", "IDENTITY_NOT_OWNER_OF_INSTRUMENT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateChargeFee",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/fees/charge",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/fees/charge"
    },
    "/weavrLogin/corporates/kyb" : {
      "get" : {
        "tags" : [ "Corporates" ],
        "summary" : "Get corporate KYB",
        "description" : "Returns the KYB status for the logged-in corporate.",
        "operationId" : "weavrLogin_corporateKybGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "kybStatus" : {
                  "type" : "string",
                  "description" : "The due diligence status of the logged-in corporate user.",
                  "enum" : [ "NOT_STARTED", "INITIATED", "PENDING_REVIEW", "APPROVED", "REJECTED" ]
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateKybGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateKybGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Start corporate KYB",
        "description" : "Corporates need to complete due diligence (KYB) before they can create instruments and perform transactions.\n\nThis operation initiates the due diligence process for the logged-in corporate.\n\nDue Diligence is handled by a KYB provider - you will need to embed the KYB UI Component in your application so that the Corporate will be able to perform the KYB process.\n\nTo initialise the KYB UI Component, you need a `reference` that is given you in the response of this operation.\n",
        "operationId" : "weavrLogin_corporateKybStart",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "reference" : {
                  "type" : "string",
                  "description" : "The reference required to initialise the KYB UI Component.",
                  "pattern" : "^[0-9]+$"
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateKybStartResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "KYB_ALREADY_APPROVED", "KYB_PERMANENTLY_REJECTED", "KYB_PENDING_REVIEW", "INDUSTRY_MISSING", "SOURCE_OF_FUNDS_MISSING" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateKybStart",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/kyb",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/kyb"
    },
    "/weavrLogin/corporates/verification/email/send" : {
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Send root user email verification code",
        "description" : "The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _corporateRootUserEmailVerify_ operation to verify the root user's email address.\n\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrLogin_corporateRootUserEmailVerificationCodeSend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email" ],
            "properties" : {
              "email" : {
                "type" : "string",
                "description" : "Email to be verified.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateRootUserEmailVerificationCodeSendRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateRootUserEmailVerificationCodeSend",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/verification/email/send",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/verification/email/send"
    },
    "/weavrLogin/corporates/verification/email/verify" : {
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Verify root user email",
        "description" : "The second step in verifying the root user's email. The randomly generated code sent to the root user via email, using the _corporateRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\nThis is needed as part of the verification process for basic due diligence.\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \"123456\".",
        "operationId" : "weavrLogin_corporateRootUserEmailVerify",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email", "verificationCode" ],
            "properties" : {
              "email" : {
                "type" : "string",
                "description" : "The unique email address to be verified.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              },
              "verificationCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code used to verify the user's email address.",
                "minLength" : 6,
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateRootUserEmailVerifyRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "VERIFICATION_CODE_INVALID", "EMAIL_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateRootUserEmailVerify",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/verification/email/verify",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/verification/email/verify"
    },
    "/weavrLogin/corporates/verification/mobile/send" : {
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Send root user mobile verification code",
        "description" : "The first step in verifying a root user's mobile number. The root user whose mobile number is to be verified is sent a text message containing a randomly generated code.\n\nThis code must then be provided in the _corporateRootUserMobileVerify_ operation to verify the root user's mobile number.\n\nNote that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrLogin_corporateRootUserMobileVerificationCodeSend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/VerificationMobileResponse"
            }
          },
          "400" : { },
          "401" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FREQUENCY_EXCEEDED", "RETRIES_EXCEEDED", "ALREADY_VERIFIED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateRootUserMobileVerificationCodeSend",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/verification/mobile/send",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/verification/mobile/send"
    },
    "/weavrLogin/corporates/verification/mobile/verify" : {
      "post" : {
        "tags" : [ "Corporates" ],
        "summary" : "Verify root user mobile",
        "description" : "The second step in verifying the root user's mobile number. The randomly generated code sent to the root user via\ntext message, using the _corporateRootUserVerificationCodeSend_ operation, is to be submitted here to verify the root user's mobile number.\n\nThis is needed as part of the verification process for basic due diligence.\n\nNote that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrLogin_corporateRootUserMobileVerify",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "verificationCode" ],
            "properties" : {
              "verificationCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code used to verify the user's mobile number.",
                "minLength" : 6,
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginCorporateRootUserMobileVerifyRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "VERIFICATION_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_corporateRootUserMobileVerify",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Corporates"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/corporates",
      "x-WM-RELATIVE_PATH" : "/verification/mobile/verify",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/corporates/verification/mobile/verify"
    },
    "/weavrLogin/login_with_password" : {
      "post" : {
        "tags" : [ "User Authentication" ],
        "summary" : "Login with password",
        "description" : "Authenticate a user with the `email` and `password` that they provided when registering.\n\nGiven that the user credentials are correct, this returns a `token` that can then be used to authorise\nother secured operations. In case the password is expired, a temporary `token` is returned, which can be used\nsolely for updating the password.\n",
        "operationId" : "weavrLogin_loginWithPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email", "password" ],
            "properties" : {
              "password" : {
                "$ref" : "#/definitions/SensitivePassword"
              },
              "email" : {
                "type" : "string",
                "description" : "The user's email is used as a username for login.",
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginLoginWithPasswordRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "credentials" : {
                  "type" : "object"
                },
                "identity" : {
                  "type" : "object"
                },
                "token" : {
                  "type" : "string",
                  "description" : "An authorisation token identifying the user to be used in the `Authorization` authorization header for secured operations."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginLoginWithPasswordResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : {
            "description" : "The authentication credentials are not found or are incorrect."
          },
          "409" : {
            "description" : "The user's password has expired. Use the returned temporary token to update their password via the  '_/passwords/update_' endpoint.",
            "schema" : {
              "type" : "object",
              "properties" : {
                "token" : {
                  "type" : "string",
                  "description" : "Temporary authorisation token required to initiate the _passwordUpdate_ operation."
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_loginWithPassword",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.User Authentication",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/login_with_password",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/login_with_password"
    },
    "/weavrLogin/logout" : {
      "post" : {
        "tags" : [ "User Authentication" ],
        "summary" : "Logout",
        "description" : "Logs out the user and terminates the session identified by the `Authorization` in the Authorization Header.",
        "operationId" : "weavrLogin_logout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_logout",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.User Authentication"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/logout",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/logout"
    },
    "/weavrLogin/managed_accounts" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get managed accounts",
        "description" : "Retrieves all managed accounts belonging to the logged-in identity.",
        "operationId" : "weavrLogin_managedAccountsGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "profileId",
          "in" : "query",
          "description" : "Filter by the managed account profile. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "Filter by the managed account friendly name. Leave out to fetch all managed accounts.\n\nThe exact name must be provided, as wildcards are not supported.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "state.blockedReason",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "state.destroyedReason",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Filter by the managed account currency.\n\nCurrencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Filter by the managed account creation date. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "createdTo",
          "in" : "query",
          "description" : "Filter by the managed account created date. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by the managed account tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records (excluding the paging limit)."
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records returned in this response (always capped at 100)."
                },
                "accounts" : {
                  "type" : "array",
                  "description" : "The filtered managed accounts list.",
                  "items" : {
                    "$ref" : "#/definitions/ManagedAccount"
                  }
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedAccountsGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountsGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Create managed account",
        "description" : "Creates a managed account for the consumer or corporate identity.\nThe Managed Account Profile (configured in the Multi Portal) specified determines the behavior and restrictions that the managed account will have.\"\n",
        "operationId" : "weavrLogin_managedAccountCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "currency", "friendlyName", "profileId" ],
            "properties" : {
              "profileId" : {
                "type" : "string",
                "description" : "The Managed Account Profile Id to be used to create the Managed Account.\n\nProfiles contain configuration and determine behavioral aspects of the newly created Managed Account, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "currency" : {
                "type" : "string",
                "description" : "The currency of the managed account.",
                "minLength" : 3,
                "maxLength" : 3,
                "pattern" : "^[A-Z]*$"
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "friendlyName" : {
                "type" : "string",
                "description" : "The friendly name to be given to the managed account.",
                "minLength" : 1,
                "maxLength" : 50
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedAccountCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "FRIENDLY_NAME_NOT_UNIQUE", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "OWNER_ACCOUNT_LIMIT_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts"
    },
    "/weavrLogin/managed_accounts/{id}" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get managed account",
        "description" : "Fetch the managed account identified by the `id` in path.",
        "operationId" : "weavrLogin_managedAccountGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Managed Account.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "patch" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Update managed account",
        "description" : "Update the details for the managed account identified by the `id` in the path.",
        "operationId" : "weavrLogin_managedAccountUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "properties" : {
              "tag" : {
                "type" : "string",
                "description" : "Updates the tag field for the managed account. Leave blank if no change is needed.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "friendlyName" : {
                "type" : "string",
                "description" : "Updates the friendly name of the managed account. Leave blank if no change is needed.",
                "minLength" : 1,
                "maxLength" : 50
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedAccountUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FRIENDLY_NAME_NOT_UNIQUE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}"
    },
    "/weavrLogin/managed_accounts/{id}/block" : {
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Block managed account",
        "description" : "Temporarily blocks a managed account.",
        "operationId" : "weavrLogin_managedAccountBlock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountBlock",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}/block",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}/block"
    },
    "/weavrLogin/managed_accounts/{id}/iban" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get managed account IBAN",
        "description" : "Fetch the IBAN details associated with the Managed Account identified by the `id` in the path.",
        "operationId" : "weavrLogin_managedAccountIBANGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccountIBAN"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountIBANGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Upgrade managed account with IBAN",
        "description" : "Assign an IBAN to a Managed Account.\n\nIBANs enable managed accounts to receive and send funds via wire transfers.\n\nAssigning an IBAN to a Managed Account may be done asynchronously, in which case the `ManagedAccountIBAN.state` will be set to `PENDING_ALLOCATION` until bank details are ready to use.\n",
        "operationId" : "weavrLogin_managedAccountsIBANUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Managed Account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccountIBAN"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_IBAN", "INSTRUMENT_IS_NOT_ACTIVE", "IBAN_ALLOCATION_EXCEEDED", "IBAN_NOT_SUPPORTED", "IBAN_ALREADY_REQUESTED", "OWNER_NOT_VERIFIED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountsIBANUpgrade",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}/iban",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}/iban"
    },
    "/weavrLogin/managed_accounts/{id}/remove" : {
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Remove managed account",
        "description" : "Destroys the managed account identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed account must be emptied from any remaining funds before it can be destroyed.\n",
        "operationId" : "weavrLogin_managedAccountRemove",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED", "INSTRUMENT_HAS_PENDING_ACTIONS", "INSTRUMENT_HAS_LINKED_CARDS" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountRemove",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}/remove",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}/remove"
    },
    "/weavrLogin/managed_accounts/{id}/statement" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get managed account statement",
        "description" : "Returns a list of transactions against the managed account identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavrLogin_managedAccountStatement",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "orderByTimestamp",
          "in" : "query",
          "description" : "Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "toTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp before `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "showFundMovementsOnly",
          "in" : "query",
          "description" : "Returns only the entries which contain fund movements.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Statement"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountStatement",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}/statement",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}/statement"
    },
    "/weavrLogin/managed_accounts/{id}/unblock" : {
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Unblock managed account",
        "description" : "Unblocks the managed account identified by the `id` path parameter.\nThe managed account must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed account was blocked by `SYSTEM`, users cannot unblock it.\n",
        "operationId" : "weavrLogin_managedAccountUnblock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedAccountUnblock",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_accounts",
      "x-WM-RELATIVE_PATH" : "/{id}/unblock",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_accounts/{id}/unblock"
    },
    "/weavrLogin/managed_cards" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get managed cards",
        "description" : "Fetch cards matching the search criteria provided.",
        "operationId" : "weavrLogin_managedCardsGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "profileId",
          "in" : "query",
          "description" : "Filter by the managed card profile. Leave out to fetch all managed cards.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "Filter by the managed card friendly name. Leave out to fetch all managed cards. The exact name must be provided, as wildcards are not supported.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "state.blockedReason",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "state.destroyedReason",
          "in" : "query",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Filter by the managed card currency. Currencies are expressed as an ISO 4217 code. Leave out to fetch all managed cards.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by the type of the card.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "externalHandle",
          "in" : "query",
          "description" : "Search by the card's `externalHandle`.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "cardNumberFirstSix",
          "in" : "query",
          "description" : "Filter by first six digits of the card.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "cardNumberLastFour",
          "in" : "query",
          "description" : "Filter by last four digits of the card.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Filter for managed cards created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed cards.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "createdTo",
          "in" : "query",
          "description" : "Filter for managed cards created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed cards.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "mode",
          "in" : "query",
          "description" : "Filter by card mode (prepaid mode or debit mode).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by the managed card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed cards.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentManagedAccountId",
          "in" : "query",
          "description" : "Filter by the Id of the parent managed account associated with the card. This is applicable only for debit mode cards.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "manufacturingState",
          "in" : "query",
          "required" : false,
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "cards" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/ManagedCard"
                  }
                },
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records (excluding the paging limit)."
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records returned in this response (always capped at 100)."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardsGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardsGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Create managed card",
        "description" : "Creates a managed card for the consumer or corporate identity.\nThe Managed Card Profile (configured in the Multi Portal) specified determines the behaviour and restrictions that the managed card will have.\n",
        "operationId" : "weavrLogin_managedCardCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ManagedCardRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "FRIENDLY_NAME_NOT_UNIQUE", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "COUNTRY_INVALID", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE", "PARENT_MANAGED_ACCOUNT_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards"
    },
    "/weavrLogin/managed_cards/assign" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Assign managed card",
        "description" : "Assigns a previously created managed card from the innovator's card pool to the consumer or corporate identity which is linked to a Managed Cards Profile.",
        "operationId" : "weavrLogin_managedCardAssign",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "activationCode", "billingAddress", "externalReference", "friendlyName", "nameOnCard" ],
            "properties" : {
              "externalReference" : {
                "type" : "string",
                "description" : "Unique code identifying a card."
              },
              "nameOnCard" : {
                "type" : "string",
                "description" : "The name that will be printed on the card.",
                "maxLength" : 27,
                "pattern" : "^[a-zA-Z0-9äöüÄÖÜ\\\\\\-^. ']*$"
              },
              "activationCode" : {
                "type" : "string",
                "description" : "The code to be used to activate the physical card. Depending on how the cards were created, this may be a code set upon creation, or it may be the same as the `externalReference`."
              },
              "billingAddress" : {
                "type" : "object"
              },
              "friendlyName" : {
                "type" : "string",
                "description" : "The friendly name given to the card.",
                "minLength" : 1,
                "maxLength" : 50
              },
              "cardholderMobileNumber" : {
                "type" : "string",
                "description" : "The mobile number including country code of the card holder, needed for 3DS challenge.",
                "minLength" : 5,
                "maxLength" : 20,
                "pattern" : "^\\+[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardAssignRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "IDENTITY_NOT_VERIFIED", "IDENTITY_NOT_ACTIVE", "CARD_ALREADY_ASSIGNED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_NOT_FOUND", "PROFILE_NOT_FOUND", "MODEL_CONSTRAINTS_VIOLATED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardAssign",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/assign",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/assign"
    },
    "/weavrLogin/managed_cards/{id}" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get managed card",
        "description" : "Returns all details of the managed card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "patch" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Update managed card",
        "description" : "Update the details of the managed card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "properties" : {
              "deliveryAddress" : {
                "type" : "object"
              },
              "deliveryMethod" : {
                "type" : "object"
              },
              "tag" : {
                "type" : "string",
                "description" : "Updates the tag field for the card. Leave blank if no change is needed.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "billingAddress" : {
                "type" : "object"
              },
              "friendlyName" : {
                "type" : "string",
                "description" : "Updates the friendly name of the card. Leave blank if no change is needed.",
                "minLength" : 1,
                "maxLength" : 50
              },
              "cardholderMobileNumber" : {
                "type" : "string",
                "description" : "The mobile number including country code of the card holder, needed in case a 3DS challenge is required.",
                "minLength" : 5,
                "maxLength" : 20,
                "pattern" : "^\\+[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "FRIENDLY_NAME_NOT_UNIQUE", "INSTRUMENT_DESTROYED", "INSTRUMENT_NOT_PHYSICAL", "COUNTRY_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}"
    },
    "/weavrLogin/managed_cards/{id}/block" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Block managed card",
        "description" : "Blocks the managed card identified by the `id` path parameter. This is a reversible action and the card can be unblocked using the _managedCardUnblock_ operation.",
        "operationId" : "weavrLogin_managedCardBlock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a managed card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardBlock",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/block",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/block"
    },
    "/weavrLogin/managed_cards/{id}/physical" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Upgrade card to physical",
        "description" : "Upgrades the virtual card identified by the `id` path parameter to physical.\n\nBefore cards can be upgraded, a physcial card programme must be set up and the card profile configuration updated accordingly.\n",
        "operationId" : "weavrLogin_managedCardPhysicalUpgrade",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "activationCode", "deliveryAddress" ],
            "properties" : {
              "pin" : {
                "$ref" : "#/definitions/SensitivePin"
              },
              "deliveryMethod" : {
                "$ref" : "#/definitions/DeliveryMethod"
              },
              "deliveryAddress" : {
                "$ref" : "#/definitions/DeliveryAddress"
              },
              "carrierType" : {
                "type" : "string",
                "description" : "The carrier type to be used for this physical card.\n\nThis reference will be given to you once your physical card carrier has been set up. If only one carrier is configured, this field can be left empty.\n"
              },
              "productReference" : {
                "type" : "string",
                "description" : "The product design reference to be used for this physical card.\n\nThis reference will be given to you once your physical card programme has been set up. If only one card programme is configured, this field can be left empty.\n"
              },
              "activationCode" : {
                "type" : "string",
                "description" : "The unique code to be used to activate the physical card.",
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardPhysicalUpgradeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_PHYSICAL", "CONFIG_ERROR_PRODUCT_REFERENCE", "PRODUCT_REFERENCE_NOT_SPECIFIED", "PRODUCT_REFERENCE_INVALID", "CONFIG_ERROR_CARRIER_TYPE", "CARRIER_TYPE_NOT_SPECIFIED", "CARRIER_TYPE_INVALID", "CONFIG_ERROR_CARD_BUREAU", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED", "PIN_INVALID_FORMAT", "PARENT_MANAGED_ACCOUNT_BLOCKED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalUpgrade",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical"
    },
    "/weavrLogin/managed_cards/{id}/physical/activate" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Activate physical card",
        "description" : "Activates the physical card identified by the `id` path paramter.",
        "operationId" : "weavrLogin_managedCardPhysicalActivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "activationCode" ],
            "properties" : {
              "activationCode" : {
                "type" : "string",
                "description" : "The code, set up when upgrading the card, that allows the physical card to be activated.",
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardPhysicalActivateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_ACTIVATED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalActivate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/activate",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/activate"
    },
    "/weavrLogin/managed_cards/{id}/physical/pin" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get physical card PIN",
        "description" : "Retrieves the PIN of the physical card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardPhysicalPinGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "pin" : {
                  "$ref" : "#/definitions/SensitivePin"
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardPhysicalPinGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "PIN_NOT_SET", "PIN_TRIES_EXCEEDED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalPinGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/pin",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/pin"
    },
    "/weavrLogin/managed_cards/{id}/physical/pin/unblock" : {
      "patch" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Unblock physical card PIN",
        "description" : "Physical cards can be marked as `pinBlocked` if there are too many failed PIN attempts.\n\nUse this operation to unblock a PIN so that the card can be used again.\n",
        "operationId" : "weavrLogin_managedCardPhysicalPinUnBlock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalPinUnBlock",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/pin/unblock",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/pin/unblock"
    },
    "/weavrLogin/managed_cards/{id}/physical/replace_damaged" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Replace damaged physical card",
        "description" : "Report as damaged, and replace the physical card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardPhysicalReplaceDamaged",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "activationCode" ],
            "properties" : {
              "activationCode" : {
                "type" : "string",
                "description" : "The code that will be used to activate the physical card replacment.",
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardPhysicalReplaceDamagedRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_DESTROYED", "INSTRUMENT_ALREADY_PENDING_REPLACEMENT", "INSTRUMENT_MARKED_AS_LOST" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalReplaceDamaged",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/replace_damaged",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/replace_damaged"
    },
    "/weavrLogin/managed_cards/{id}/physical/replace_lost_stolen" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Replace lost or stolen physical card",
        "description" : "Issue a replacement for the physical card, identified by the `id` path parameter, that has already been reported as lost or stolen.\n\nAny funds (that are not blocked pending a purchase for a previous authorisation) remaining on the card will be automatically transferred to the new replacement card.\n",
        "operationId" : "weavrLogin_managedCardPhysicalReplaceLostOrStolen",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "activationCode" ],
            "properties" : {
              "activationCode" : {
                "type" : "string",
                "description" : "A unique code to be used to activate the replacement physical card.",
                "maxLength" : 6,
                "pattern" : "^[0-9]+$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginManagedCardPhysicalReplaceLostOrStolenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_NOT_MARKED_LOST_OR_STOLEN", "INSTRUMENT_DESTROYED", "INSTRUMENT_ALREADY_REPLACED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalReplaceLostOrStolen",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/replace_lost_stolen",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/replace_lost_stolen"
    },
    "/weavrLogin/managed_cards/{id}/physical/report_lost" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Report physical card as lost",
        "description" : "Report the physical card identified by the `id` path parameter as lost. This will deactivate the instrument and a new card will need to be requested.",
        "operationId" : "weavrLogin_managedCardPhysicalReportLost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalReportLost",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/report_lost",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/report_lost"
    },
    "/weavrLogin/managed_cards/{id}/physical/report_stolen" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Report physical card as stolen",
        "description" : "Report the physical card identified by the `id` path parameter as stolen. This will destroy the instrument and a new replacement card will need to be requested.\n\nOnce a replacement is requested, any funds remaining on this destroyed card will be transferred to the replacement card.\"\n",
        "operationId" : "weavrLogin_managedCardPhysicalReportStolen",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_DESTROYED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardPhysicalReportStolen",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/physical/report_stolen",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/physical/report_stolen"
    },
    "/weavrLogin/managed_cards/{id}/remove" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Remove managed card",
        "description" : "Destroys the managed card identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed card must be empty before it can be destroyed using this operation.\n",
        "operationId" : "weavrLogin_managedCardRemove",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a managed card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardRemove",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/remove",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/remove"
    },
    "/weavrLogin/managed_cards/{id}/spend_rules" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get managed card spend rules",
        "description" : "Fetch the list of spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardSpendRulesGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCardsSpendRules"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardSpendRulesGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "put" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Set managed card spend rules",
        "description" : "Set the spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrLogin_managedCardSpendRulesSet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ManagedCardsSpendRules"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ManagedCardsSpendRules"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY", "SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD", "SPEND_LIMIT_DUPLICATE_INTERVAL" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardSpendRulesSet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards",
        "x-WM-OPERATION_TYPE" : "update"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/spend_rules",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/spend_rules"
    },
    "/weavrLogin/managed_cards/{id}/statement" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get managed card statement",
        "description" : "Returns a list of transactions against the managed card identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavrLogin_managedCardStatement",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a managed card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "orderByTimestamp",
          "in" : "query",
          "description" : "Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "toTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp before the `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Statement"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardStatement",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/statement",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/statement"
    },
    "/weavrLogin/managed_cards/{id}/unblock" : {
      "post" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Unblock managed card",
        "description" : "Unblocks the managed card identified by the `id` path parameter.\nThe managed card must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed card was blocked by `SYSTEM`, users cannot unblock it.\n",
        "operationId" : "weavrLogin_managedCardUnblock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_managedCardUnblock",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/managed_cards",
      "x-WM-RELATIVE_PATH" : "/{id}/unblock",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/managed_cards/{id}/unblock"
    },
    "/weavrLogin/outgoing_wire_transfers" : {
      "get" : {
        "tags" : [ "Outgoing Wire Transfers" ],
        "summary" : "Get outgoing wire transfer transactions",
        "description" : "Retrieves all the outgoing wire transfer transactions performed by the logged-in identity.",
        "operationId" : "weavrLogin_outgoingWireTransfersGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "profileId",
          "in" : "query",
          "description" : "Filter by the outgoing wire transfer profile. Leave out to fetch all entries.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instrument",
          "in" : "query",
          "description" : "Filter by the source instrument id (which must be a managed account).",
          "required" : false,
          "type" : "object"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by the outgoing wire transfer state. Leave out to fetch all states.",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Filter for outgoing wire transfer transactions created after `createdFrom` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "createdTo",
          "in" : "query",
          "description" : "Filter for Outgoing Wire Transfer transactions created before `createdTo` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by the outgoing wire transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "transfer" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/OutgoingWireTransfer"
                  }
                },
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records (excluding the paging limit)"
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records returned in this response (always capped at 100)."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginOutgoingWireTransfersGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_outgoingWireTransfersGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Outgoing Wire Transfers"
      },
      "post" : {
        "tags" : [ "Outgoing Wire Transfers" ],
        "summary" : "Create outgoing wire transfer transaction",
        "description" : "Transfers funds from managed accounts to an external bank account.\n\nThe Outgoing WireTransfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrLogin_outgoingWireTransferCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "destinationBeneficiary", "profileId", "sourceInstrument", "transferAmount" ],
            "properties" : {
              "profileId" : {
                "type" : "string",
                "description" : "The Outgoing Wire Transfer Profile Id to be used to create the wire transfer transaction.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "transferAmount" : {
                "type" : "object"
              },
              "description" : {
                "type" : "string",
                "description" : " Transaction description.",
                "maxLength" : 50
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "sourceInstrument" : {
                "type" : "object",
                "description" : "The source managed account from where the funds were taken.",
                "properties" : {
                  "id" : {
                    "type" : "string",
                    "pattern" : "^[0-9]+$"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "managed_accounts" ]
                  }
                }
              },
              "destinationBeneficiary" : {
                "type" : "object"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginOutgoingWireTransferCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/OutgoingWireTransfer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "AMOUNT_INVALID", "FUNDS_INSUFFICIENT", "SOURCE_NOT_FOUND", "SOURCE_BLOCKED", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "TYPE_NOT_SUPPORTED_BY_PROFILE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_outgoingWireTransferCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Outgoing Wire Transfers",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/outgoing_wire_transfers",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/outgoing_wire_transfers"
    },
    "/weavrLogin/outgoing_wire_transfers/{id}" : {
      "get" : {
        "tags" : [ "Outgoing Wire Transfers" ],
        "summary" : "Get outgoing wire transfer transaction",
        "description" : "Retrieves the outgoing wire transfer identified by the `id` path parameter.",
        "operationId" : "weavrLogin_outgoingWireTransferGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Outgoing Wire Transfer transaction.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/OutgoingWireTransfer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_outgoingWireTransferGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Outgoing Wire Transfers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/outgoing_wire_transfers",
      "x-WM-RELATIVE_PATH" : "/{id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/outgoing_wire_transfers/{id}"
    },
    "/weavrLogin/passwords/lost_password/resume" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Resume lost password process",
        "description" : "This is the second and final step in updating the password of a user who forgot their password.",
        "operationId" : "weavrLogin_lostPasswordResume",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email", "newPassword", "nonce" ],
            "properties" : {
              "newPassword" : {
                "$ref" : "#/definitions/SensitivePassword"
              },
              "nonce" : {
                "type" : "string",
                "description" : "The uniquely generated code included as part of the URL request parameters sent to the user via email.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$"
              },
              "email" : {
                "type" : "string",
                "description" : "The email address associated with the user who is resetting their password.",
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginLostPasswordResumeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/TokenResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INVALID_NONCE_OR_EMAIL", "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_lostPasswordResume",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Passwords",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/passwords",
      "x-WM-RELATIVE_PATH" : "/lost_password/resume",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/passwords/lost_password/resume"
    },
    "/weavrLogin/passwords/lost_password/start" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Initiate lost password process",
        "description" : "Initiate the lost password process.\n\nIf the email address provided is associated with an active user, an email will be sent, containing a URL that redirects the user to change their password.\nThe URL contains request parameters for all of the parameters required to change the password for the user via the `/passwords/lost_password/resume` POST endpoint.\n",
        "operationId" : "weavrLogin_lostPasswordInitiate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email" ],
            "properties" : {
              "email" : {
                "type" : "string",
                "description" : "The user's email address.",
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginLostPasswordInitiateRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "MULTIPLE_ACCOUNTS_FOUND", "ACCOUNT_NOT_FOUND" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_lostPasswordInitiate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Passwords"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/passwords",
      "x-WM-RELATIVE_PATH" : "/lost_password/start",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/passwords/lost_password/start"
    },
    "/weavrLogin/passwords/update" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Update password",
        "description" : "Update the password for the logged-in user.",
        "operationId" : "weavrLogin_passwordUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "newPassword", "oldPassword" ],
            "properties" : {
              "oldPassword" : {
                "$ref" : "#/definitions/SensitivePassword"
              },
              "newPassword" : {
                "$ref" : "#/definitions/SensitivePassword"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginPasswordUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "passwordInfo" : {
                  "$ref" : "#/definitions/PasswordInfo"
                },
                "token" : {
                  "type" : "string",
                  "description" : "An authorisation token to be used in the Authorization header for secured operations."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginPasswordUpdateResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_passwordUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Passwords"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/passwords",
      "x-WM-RELATIVE_PATH" : "/update",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/passwords/update"
    },
    "/weavrLogin/passwords/validate" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Validate password",
        "description" : "Check that a password adheres to all complexity checks.",
        "operationId" : "weavrLogin_passwordValidate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "password" ],
            "properties" : {
              "password" : {
                "$ref" : "#/definitions/SensitivePassword"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginPasswordValidateRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_passwordValidate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Passwords"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/passwords",
      "x-WM-RELATIVE_PATH" : "/validate",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/passwords/validate"
    },
    "/weavrLogin/passwords/{user_id}/create" : {
      "post" : {
        "tags" : [ "Passwords" ],
        "summary" : "Create password",
        "description" : "Create a new password for the user identified by the `user_id` path parameter.",
        "operationId" : "weavrLogin_passwordCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The user Id for which this password is to be created.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "password" ],
            "properties" : {
              "password" : {
                "$ref" : "#/definitions/SensitivePassword"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginPasswordCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "passwordInfo" : {
                  "$ref" : "#/definitions/PasswordInfo"
                },
                "token" : {
                  "type" : "string",
                  "description" : "The authorisation token to be used in the Authorization header for secured operations."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginPasswordCreateResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_passwordCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Passwords"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/passwords",
      "x-WM-RELATIVE_PATH" : "/{user_id}/create",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/passwords/{user_id}/create"
    },
    "/weavrLogin/sends" : {
      "get" : {
        "tags" : [ "Sends" ],
        "summary" : "Get send transactions",
        "description" : "Retrieves all the send transactions performed by the logged-in identity.",
        "operationId" : "weavrLogin_sendsGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "profileId",
          "in" : "query",
          "description" : "Filter by the Send profile. Leave out to fetch all entries.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instrumentId",
          "in" : "query",
          "description" : "Filter by the source instrument id.",
          "required" : false
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by the Send transaction state. Leave out to fetch all states.",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Filter for send transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "createdTo",
          "in" : "query",
          "description" : "Filter for send transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records (excluding the paging limit)."
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records returned in this response."
                },
                "send" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Send"
                  }
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginSendsGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_sendsGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Sends"
      },
      "post" : {
        "tags" : [ "Sends" ],
        "summary" : "Create send transaction",
        "description" : "Sends funds between managed accounts and managed cards belonging to *different* corporate or consumer identities.\n\nThe Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrLogin_sendCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "destination", "destinationAmount", "profileId", "source" ],
            "properties" : {
              "profileId" : {
                "type" : "string",
                "description" : "The Send Profile Id to be used to create the send transaction.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "destination" : {
                "$ref" : "#/definitions/InstrumentId"
              },
              "tag" : {
                "type" : "string",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "source" : {
                "$ref" : "#/definitions/InstrumentId"
              },
              "destinationAmount" : {
                "$ref" : "#/definitions/CurrencyAmount"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginSendCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Send"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "SEND_TO_INSTRUMENT_UNSUPPORTED", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_sendCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Sends",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/sends",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/sends"
    },
    "/weavrLogin/sends/{id}" : {
      "get" : {
        "tags" : [ "Sends" ],
        "summary" : "Get send transaction",
        "description" : "Retrieve the send transaction identified by the `id` path parameter.",
        "operationId" : "weavrLogin_sendGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Send transaction.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Send"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_sendGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Sends"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/sends",
      "x-WM-RELATIVE_PATH" : "/{id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/sends/{id}"
    },
    "/weavrLogin/transfers" : {
      "get" : {
        "tags" : [ "Transfers" ],
        "summary" : "Get transfer transactions",
        "description" : "Retrieves all the transfer transactions performed by the logged-in identity.",
        "operationId" : "weavrLogin_transfersGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "profileId",
          "in" : "query",
          "description" : "Filter by the transfer profile. Leave out to fetch all transfer transactions.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instrumentId",
          "in" : "query",
          "description" : "Filter by the source instrument id.",
          "required" : false
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by the transfer transaction state. Leave out to fetch all states.",
          "required" : false,
          "type" : "array"
        }, {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Filter for transfer transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "createdTo",
          "in" : "query",
          "description" : "Filter for transfer transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by the transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "transfer" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Transfer"
                  }
                },
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records (excluding the paging limit)."
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of records returned in this response."
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginTransfersGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_transfersGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Transfers"
      },
      "post" : {
        "tags" : [ "Transfers" ],
        "summary" : "Create transfer transaction",
        "description" : "Transfers funds between managed accounts and managed cards belonging to the same corporate or consumer identity.\n\nThe Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrLogin_transferCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "destination", "destinationAmount", "profileId", "source" ],
            "properties" : {
              "profileId" : {
                "type" : "string",
                "description" : "The Transfer Profile Id to be used to create the transfer transaction.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
                "pattern" : "^[0-9]+$"
              },
              "destination" : {
                "$ref" : "#/definitions/InstrumentId"
              },
              "tag" : {
                "type" : "string",
                "description" : "The tag field is a custom field that can be used to search and filter.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_-]+$"
              },
              "source" : {
                "$ref" : "#/definitions/InstrumentId"
              },
              "destinationAmount" : {
                "$ref" : "#/definitions/CurrencyAmount"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginTransferCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "TRANSFER_BETWEEN_INSTRUMENTS_UNSUPPORTED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_transferCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Transfers",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/transfers",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/transfers"
    },
    "/weavrLogin/transfers/{id}" : {
      "get" : {
        "tags" : [ "Transfers" ],
        "summary" : "Get transfer transaction",
        "description" : "Retrieve the transfer transaction identified by the `id` path parameter.",
        "operationId" : "weavrLogin_transferGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Transfer transaction.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_transferGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Transfers"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/transfers",
      "x-WM-RELATIVE_PATH" : "/{id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/transfers/{id}"
    },
    "/weavrLogin/users" : {
      "get" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Get users",
        "description" : "Fetches all authorised users associated with the corporate or consumer identity the logged-in user belongs to.",
        "operationId" : "weavrLogin_usersGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "name" : "paging",
          "in" : "query",
          "description" : "The offset and number of results to return. Leave out to fetch the first page of results.",
          "required" : false
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Filter for active or deactivated users. Leave out to fetch all users.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Filter by the email address of the user.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "type" : "object",
              "properties" : {
                "count" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records (excluding the paging limit)."
                },
                "responseCount" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "The total number of records returned in this response (always capped at 100)."
                },
                "users" : {
                  "type" : "array",
                  "description" : "The list of users matching the criteria specified.",
                  "items" : {
                    "$ref" : "#/definitions/User"
                  }
                }
              },
              "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginUsersGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_usersGet",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Create user",
        "description" : "Creates a user linked to the logged-in corporate or consumer identity.\n\nOnce on-boarded, users have access to all instruments (cards and accounts) of the identity.\n\nApplication-specific permissions to limit what each user can view and do need to be implemented in your application.\n",
        "operationId" : "weavrLogin_userCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "email", "name", "surname" ],
            "properties" : {
              "surname" : {
                "type" : "string",
                "description" : "The last name of the user.",
                "maxLength" : 20
              },
              "name" : {
                "type" : "string",
                "description" : "The first name of the user.",
                "maxLength" : 20
              },
              "email" : {
                "type" : "string",
                "description" : "The email address of the user.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginUserCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_UNIQUE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users"
    },
    "/weavrLogin/users/{user_id}" : {
      "get" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Get user",
        "description" : "Retrieves the user identified by the `user_id` path parameter.",
        "operationId" : "weavrLogin_userGetById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userGetById",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "patch" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Update user",
        "description" : "Update the details of a user identified by the `user_id` in the the path parameter.\n\nOnly the fields that are specified in the request body will be updated. All other fields will remain unchanged.\n",
        "operationId" : "weavrLogin_userUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "properties" : {
              "surname" : {
                "type" : "string",
                "description" : "The last name of the user.",
                "maxLength" : 20
              },
              "name" : {
                "type" : "string",
                "description" : "The first name of the user.",
                "maxLength" : 20
              },
              "email" : {
                "type" : "string",
                "description" : "The email address of the user.",
                "minLength" : 6,
                "maxLength" : 255,
                "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginUserUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_UNIQUE" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}"
    },
    "/weavrLogin/users/{user_id}/activate" : {
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Activate user",
        "description" : "Activate the user identified by the `user_id` path parameter.\n\nBy default, any new users created will be automatically activated. This operation needs to be used only if the user was previously de-activated using the _userDeactivate_ operation, or if the user was de-activated automatically after multiple incorrect login attempts.\n",
        "operationId" : "weavrLogin_userActivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "USER_ALREADY_ACTIVATED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userActivate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}/activate",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}/activate"
    },
    "/weavrLogin/users/{user_id}/deactivate" : {
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Deactivate user",
        "description" : "De-activate the user identified by the `user_id` path parameter.\n\nDeactivated users cannot log in or execute any operations with their credentials.\n\nThis operations is not final and a user can be re-activated using the userActivate operation. Note that another active user would need to log in so as to re-activate the de-activated user.\n",
        "operationId" : "weavrLogin_userDeactivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "USER_ALREADY_DEACTIVATED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userDeactivate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}/deactivate",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}/deactivate"
    },
    "/weavrLogin/users/{user_id}/invite" : {
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Send user invite",
        "description" : "Once a user is created using the _userCreate_ operation, the user needs to setup his/her password.\n\nAn invitation needs to be sent to the user in order to be able to set up the password for the first time. The invitation email, which remains valid for 1 month, will contain a URL having all information required to setup the password via the _userInviteConsume_.\n",
        "operationId" : "weavrLogin_userInviteSend",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INVITE_ALREADY_CONSUMED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userInviteSend",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}/invite",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}/invite"
    },
    "/weavrLogin/users/{user_id}/invite/consume" : {
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Consume user invite",
        "description" : "Consumes an invitation perviously sent to the user via _userInviteSend_. This is needed so that the invited user sets up the password.\n\nIn the Sandbox environment, the `inviteCode` will always be 123456.\n",
        "operationId" : "weavrLogin_userInviteConsume",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "inviteCode", "password" ],
            "properties" : {
              "password" : {
                "$ref" : "#/definitions/SensitivePassword"
              },
              "inviteCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code that is sent in the invitation email which used to verify the invite.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginUserInviteConsumeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/TokenResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INVITE_OR_INVITE_CODE_INVALID", "UNRESOLVED_IDENTITY", "PASSWORD_ALREADY_USED", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userInviteConsume",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}/invite/consume",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}/invite/consume"
    },
    "/weavrLogin/users/{user_id}/invite/validate" : {
      "post" : {
        "tags" : [ "Authorised Users" ],
        "summary" : "Validate user invite",
        "description" : "Check if a user's invite is still valid. This operation is useful to avoid having the user fill in a form only to be held by a validation issue (eg. expired invite).",
        "operationId" : "weavrLogin_userInviteValidate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The unique identifier for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "required" : [ "inviteCode" ],
            "properties" : {
              "inviteCode" : {
                "type" : "string",
                "description" : "The randomly generated one-time use code that is sent in the invitation email which is used to verify the invite.",
                "maxLength" : 50,
                "pattern" : "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$"
              }
            },
            "type" : "object",
            "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.WeavrLoginUserInviteValidateRequest"
          }
        } ],
        "responses" : {
          "204" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "INVITE_OR_INVITE_CODE_INVALID" ]
                }
              }
            }
          },
          "500" : { },
          "503" : { },
          "default" : {
            "description" : "Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-METHOD_NAME" : "weavrLogin_userInviteValidate",
        "x-WM-CRUD_OPERATION_ID" : "weavrLogin.Authorised Users"
      },
      "parameters" : [ ],
      "x-WM-BASE_PATH" : "/weavrLogin/users",
      "x-WM-RELATIVE_PATH" : "/{user_id}/invite/validate",
      "x-WM-COMPLETE_PATH" : "${rest.weavrLogin.scheme}://${rest.weavrLogin.host}${rest.weavrLogin.basepath}/users/{user_id}/invite/validate"
    }
  },
  "securityDefinitions" : {
    "Authorization" : {
      "type" : "apiKey",
      "name" : "authorization",
      "in" : "header"
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api-key",
      "in" : "header"
    }
  },
  "definitions" : {
    "DestroyedReason" : {
      "type" : "string",
      "description" : "The reason why the instrument has been destroyed:\n  - SYSTEM: The platform or an administrator of the platform has destroyed the instrument.\n  - USER: The root, or an authorised user, of the identity owning the instrument has destroyed the instrument.\n  - LOST: The instrument was automatically destroyed as it was marked as lost.\n  - STOLEN: The instrument was automatically destroyed as it was marked as stolen.\n  - EXPIRED: The instrument was automatically destroyed as it expired.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.DestroyedReason"
    },
    "TransactionState" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.TransactionState"
    },
    "Address" : {
      "required" : [ "addressLine1", "city", "country", "postCode" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "description" : "The city of the address.",
          "maxLength" : 20
        },
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the address.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the address.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "postCode" : {
          "type" : "string",
          "description" : "The post cost associated with the address.",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the address.",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Address"
    },
    "OutgoingWireTransferState" : {
      "type" : "string",
      "description" : "The state of the Outgoing wire transfer transaction, as follows:\n  - SUBMITTED: The wire transfer has been initiated over the selected route.\n  - REJECTED: The wire transfer submitted was rejected.\n  - APPROVED: The wire transfer submission was aproved.\n  - FAILED: There was an issue with the transfer, and the transaction has failed.\n  - COMPLETED: The requested funds have been sent from the source instrument.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.OutgoingWireTransferState"
    },
    "CorporateRootUser" : {
      "required" : [ "active", "companyPosition", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "emailVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's email has been verified."
        },
        "companyPosition" : {
          "type" : "string",
          "description" : "The company position of the root user (e.g. Director, CEO, Product Manager, etc..).",
          "minLength" : 1,
          "maxLength" : 100
        },
        "surname" : {
          "type" : "string",
          "description" : "Last name of the root user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "First name of the root user.",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the root user. If false, then the user will not be able to log in."
        },
        "mobileNumberVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's mobile number has been verified."
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the root user. When logging in, the email is used as the username of the user.",
          "minLength" : 6,
          "maxLength" : 255,
          "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.CorporateRootUser"
    },
    "InstrumentState" : {
      "type" : "string",
      "description" : "The state of the instrument indicating what it can and cannot do as follows:\n  - ACTIVE: The instrument is in an active state and can be used in transactions.\n  - BLOCKED: The instrument is temporarily blocked and cannot be used. Any funds on the instrument are also frozen. The `blockedReason` provides more information as to why it was blocked.\n  - DESTROYED: The instrument has been permanently destroyed. The `destroyReason` provides more information as to why it was destroyed.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.InstrumentState"
    },
    "Send" : {
      "required" : [ "creationTimestamp", "destination", "destinationAmount", "id", "profileId", "source", "state" ],
      "properties" : {
        "profileId" : {
          "type" : "string",
          "description" : "The Id of the Send Profile that this transaction was created with.",
          "pattern" : "^[0-9]+$"
        },
        "destination" : {
          "type" : "object"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a send transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "source" : {
          "type" : "object"
        },
        "state" : {
          "type" : "object"
        },
        "destinationAmount" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Send"
    },
    "Industry" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Industry"
    },
    "Consumer" : {
      "required" : [ "acceptedTerms", "id", "ipAddress", "profileId", "rootUser" ],
      "properties" : {
        "rootUser" : {
          "type" : "object"
        },
        "sourceOfFundsOther" : {
          "type" : "string",
          "description" : "Description of source of funds in case `OTHER` was chosen."
        },
        "acceptedTerms" : {
          "type" : "boolean",
          "description" : "Must be set to *true* to indicate that the consumer root user has accepted the terms and conditions."
        },
        "profileId" : {
          "type" : "string",
          "description" : "The Consumer Profile Id that the consumer identity was linked with when created. Profiles determine behavioral aspects of the consumer identity, such as fees.",
          "pattern" : "^[0-9]+$"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when this consumer was created, expressed in Epoch timestamp using millisecond precision."
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "The IP address of the consumer user doing the registration.",
          "minLength" : 5,
          "maxLength" : 45
        },
        "sourceOfFunds" : {
          "type" : "object"
        },
        "id" : {
          "type" : "object"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "feeGroup" : {
          "type" : "string",
          "description" : "The fee group which the consumer is bound to."
        },
        "baseCurrency" : {
          "type" : "string",
          "description" : "The default currency of the consumer.",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]*$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Consumer"
    },
    "SpendLimit" : {
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SpendLimit"
    },
    "SyntaxError" : {
      "properties" : {
        "invalidFields" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "fieldName" : {
                "type" : "string"
              },
              "params" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "error" : {
                "type" : "string",
                "enum" : [ "REQUIRED", "HAS_TEXT", "REQUIRES", "SIZE", "RANGE", "IN", "NOT_IN", "REGEX", "EXACTLY", "AT_LEAST", "AT_MOST", "ALL_OR_NONE" ]
              }
            }
          }
        }
      },
      "type" : "object",
      "description" : "Is returned as part of an HTTP error response whenever a syntax error is detected. A list of the fields together with their syntax error will be provided.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SyntaxError"
    },
    "SensitivePin" : {
      "properties" : {
        "value" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 24
        }
      },
      "type" : "object",
      "description" : "The PIN used for in-person transactions done with physical cards.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.\n\nTo show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SensitivePin"
    },
    "PasswordInfo" : {
      "required" : [ "identityId" ],
      "properties" : {
        "expiryDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The millisecond timestamp indicating when the password will expire. If 0, then this password will not expire."
        },
        "identityId" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "description" : "Additional information related to the user's password.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.PasswordInfo"
    },
    "ConsumerSourceOfFunds" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ConsumerSourceOfFunds"
    },
    "TypeId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier of the user.",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of user.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "enum" : [ "ROOT", "USER" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.TypeId"
    },
    "PrepaidModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "required" : [ "currency" ],
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The currency of the card in ISO-4217 format, for example GBP,USD or EUR.",
            "minLength" : 3,
            "maxLength" : 3,
            "pattern" : "^[A-Z]*$"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.PrepaidModeCardRequest"
    },
    "AvailableToSpend" : {
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.AvailableToSpend"
    },
    "SepaBankDetails" : {
      "required" : [ "bankIdentifierCode", "iban" ],
      "properties" : {
        "iban" : {
          "type" : "string",
          "description" : "International Bank Account Number, required for wire transfer over SEPA."
        },
        "bankIdentifierCode" : {
          "type" : "string",
          "description" : "BIC, required for wire transfer over SEPA."
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over SEPA.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SepaBankDetails"
    },
    "OutgoingWireTransfer" : {
      "required" : [ "creationTimestamp", "destination", "id", "profileId", "sourceInstrument", "state", "transferAmount", "type" ],
      "properties" : {
        "profileId" : {
          "type" : "string",
          "description" : "The Id of the Outgoing Wire Transfer Profile that this transaction was created with.",
          "pattern" : "^[0-9]+$"
        },
        "transferAmount" : {
          "type" : "object"
        },
        "destination" : {
          "$ref" : "#/definitions/OutgoingWireTransferBeneficiary"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "description" : {
          "type" : "string",
          "description" : " Transaction description.",
          "maxLength" : 50
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of an Outgoing Wire Transfer transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "state" : {
          "$ref" : "#/definitions/OutgoingWireTransferState"
        },
        "type" : {
          "type" : "string",
          "description" : "The wire transfer rails used, from SEPA, Faster Payments or SWIFT.",
          "enum" : [ "SEPA", "FASTER_PAYMENTS", "SWIFT" ]
        },
        "sourceInstrument" : {
          "type" : "object",
          "description" : "The source managed account from where the funds were taken.",
          "properties" : {
            "id" : {
              "type" : "string",
              "pattern" : "^[0-9]+$"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "managed_accounts" ]
            }
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.OutgoingWireTransfer"
    },
    "SensitiveCvv" : {
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 3
        }
      },
      "type" : "object",
      "description" : "The CVV of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.\n\nTo show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SensitiveCvv"
    },
    "SwiftBankDetails" : {
      "required" : [ "code", "iban" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "SWIFT code, identifiying a particular bank or branch, required for wire transfer over SWIFT."
        },
        "iban" : {
          "type" : "string",
          "description" : "International Bank Account Number, required for wire transfer over SWIFT."
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over SWIFT.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SwiftBankDetails"
    },
    "Paging" : {
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset value, indicating the initial item number to be returned from the data set satisfying the given criteria."
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The limit of the results for paging, starting at the offset. Limit is always capped at 100."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Paging"
    },
    "CompanyType" : {
      "type" : "string",
      "description" : "Supported company types - if company type is not listed, please contact our support team to check if the company type can be supported.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.CompanyType"
    },
    "InstrumentId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "managed_cards", "managed_accounts" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.InstrumentId"
    },
    "CurrencyAmount" : {
      "required" : [ "currency" ],
      "properties" : {
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The monetary amount, scaled to the lowest denomination of the currency.\n\nExample, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00.\n"
        },
        "currency" : {
          "type" : "string",
          "description" : "The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]*$"
        }
      },
      "type" : "object",
      "description" : "The object representing a monetary amount in a particular currency.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.CurrencyAmount"
    },
    "TransactionId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INSTRUMENT_CREATE", "INSTRUMENT_BLOCK", "INSTRUMENT_UNBLOCK", "INSTRUMENT_DELETE", "AUTHORISATION", "SETTLEMENT", "MANUAL_TRANSACTION", "TRANSFER", "SEND", "DEPOSIT", "AUTHORISATION_REVERSAL", "AUTHORISATION_EXPIRY", "AUTHORISATION_DECLINE", "AUTHORISATION_MANUAL_CLOSE", "MERCHANT_REFUND", "MERCHANT_REFUND_REVERSAL", "ORIGINAL_CREDIT_TRANSACTION", "SETTLEMENT_REVERSAL", "ADJUSTMENT", "CHARGE_FEE", "WITHDRAWAL_RESERVE", "WITHDRAWAL_RELEASE", "FEE_REVERSAL", "CARD_UPGRADE_TO_PHYSICAL", "ACTIVATE_PHYSICAL_CARD", "INSTRUMENT_REPLACE", "OUTGOING_WIRE_TRANSFER" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.TransactionId"
    },
    "SpendLimitInterval" : {
      "type" : "string",
      "description" : "The time period for which the `spendLimit` is valid.\n - DAY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day\n - WEEK: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC\n - MONTH: 1st of current calendar month to end of current calendar month\n - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows: \n  - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC\n  - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC\n  - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC\n  - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC\n\n- YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year.\n- ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SpendLimitInterval"
    },
    "ManagedInstrumentBalance" : {
      "properties" : {
        "actualBalance" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The funds that are actually on the instrument. Funds that are blocked or pending, due to for example, a purchase authorisation or a pending deposit, are included in the actual balance."
        },
        "availableBalance" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The funds available for transactions on the instrument. Funds that are blocked or pending are not included in the available balance."
        }
      },
      "type" : "object",
      "description" : "Instruments with funds have 2 balances, the `availableBalance` indicating the funds that are available for transactions such as purchases, and the `actualBalance` indicating the funds that are actually on the instrument.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedInstrumentBalance"
    },
    "TokenResponse" : {
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "An authorisation token to be used in the Authorization header for secured operations."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.TokenResponse"
    },
    "DebitModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "parentManagedAccountId" : {
            "type" : "string",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "pattern" : "^[0-9]+$"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.DebitModeCardRequest"
    },
    "ManagedCardsSpendRules" : {
      "required" : [ "allowAtm", "allowCashback", "allowContactless", "allowCreditAuthorisations", "allowECommerce", "allowedMerchantCategories", "allowedMerchantIds", "blockedMerchantCategories", "blockedMerchantIds", "spendLimit" ],
      "properties" : {
        "allowAtm" : {
          "type" : "boolean",
          "description" : "Indicates if an ATM Withdrawal transaction is allowed on the card."
        },
        "allowECommerce" : {
          "type" : "boolean",
          "description" : "Indicates if an online transaction is allowed on the card."
        },
        "blockedMerchantCategories" : {
          "type" : "array",
          "description" : "Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantIds" : {
          "type" : "array",
          "description" : "Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowCashback" : {
          "type" : "boolean",
          "description" : "Indicates if a cashback transaction at a physical terminal is allowed on the card."
        },
        "spendLimit" : {
          "type" : "array",
          "description" : "The total amount of funds that can be spent using this card, in a given time interval.",
          "items" : {
            "$ref" : "#/definitions/SpendLimit"
          }
        },
        "blockedMerchantIds" : {
          "type" : "array",
          "description" : "Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Marchant Id is also in the allowed list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowCreditAuthorisations" : {
          "type" : "boolean",
          "description" : "Indicates if a the card can receive a credit transaction."
        },
        "allowedMerchantCategories" : {
          "type" : "array",
          "description" : "Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowContactless" : {
          "type" : "boolean",
          "description" : "Indicates if a contactless transaction is allowed on the card."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedCardsSpendRules"
    },
    "Transfer" : {
      "required" : [ "creationTimestamp", "destination", "destinationAmount", "id", "profileId", "source", "state" ],
      "properties" : {
        "profileId" : {
          "type" : "string",
          "description" : "The Id of the Transfer Profile that this transaction was created with.",
          "pattern" : "^[0-9]+$"
        },
        "destination" : {
          "type" : "object"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a Transfer transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "source" : {
          "type" : "object"
        },
        "state" : {
          "type" : "object"
        },
        "destinationAmount" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Transfer"
    },
    "User" : {
      "required" : [ "email", "id", "identity", "name", "surname" ],
      "properties" : {
        "identity" : {
          "type" : "object"
        },
        "surname" : {
          "type" : "string",
          "description" : "The last name of the user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "The first name of the user.",
          "maxLength" : 100
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the user. If the `active` attribute is false, then the user will not be able to log in."
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of the user.",
          "pattern" : "^[0-9]+$"
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the user. When logging in, the email is used as the username of the user.",
          "minLength" : 6,
          "maxLength" : 255,
          "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.User"
    },
    "Corporate" : {
      "required" : [ "acceptedTerms", "baseCurrency", "company", "creationTimestamp", "id", "industry", "ipAddress", "profileId", "rootUser", "sourceOfFunds" ],
      "properties" : {
        "rootUser" : {
          "type" : "object"
        },
        "sourceOfFundsOther" : {
          "type" : "string",
          "description" : "Description of source of funds in case `OTHER` was chosen."
        },
        "acceptedTerms" : {
          "type" : "boolean",
          "description" : "Must be set to *true* to indicate that the root user has accepted the terms and conditions."
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "The IP address of the user doing the registration.",
          "minLength" : 5,
          "maxLength" : 45
        },
        "industry" : {
          "type" : "object"
        },
        "sourceOfFunds" : {
          "type" : "object"
        },
        "baseCurrency" : {
          "type" : "string",
          "description" : "The default currency of the corporate - any totals and limits are calculated in this currency.",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]*$"
        },
        "profileId" : {
          "type" : "string",
          "description" : "The Corporate Profile Id that the corporate identity was linked with when created. Profiles determine behavioral aspects of the corporate idenity, such as fees.",
          "pattern" : "^[0-9]+$"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the Corporate was created, expressed in Epoch timestamp using millisecond precision."
        },
        "company" : {
          "type" : "object",
          "properties" : {
            "registeredAddress" : {
              "type" : "object"
            },
            "incorporatedOn" : {
              "type" : "object"
            },
            "registrationNumber" : {
              "type" : "string",
              "description" : "The company registration number.",
              "minLength" : 1,
              "maxLength" : 20
            },
            "name" : {
              "type" : "string",
              "description" : "The registered name of the company.",
              "maxLength" : 100
            },
            "type" : {
              "$ref" : "#/definitions/CompanyType"
            },
            "businessAddress" : {
              "type" : "object"
            },
            "countryOfRegistration" : {
              "type" : "string",
              "description" : "The country of company registration in ISO 3166 alpha-2.",
              "minLength" : 2,
              "maxLength" : 2,
              "pattern" : "^[A-Z]+$"
            }
          }
        },
        "id" : {
          "type" : "object"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "feeGroup" : {
          "type" : "string",
          "description" : "Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Corporate"
    },
    "PhysicalCardDetails" : {
      "required" : [ "pendingActivation" ],
      "properties" : {
        "pinBlocked" : {
          "type" : "boolean",
          "description" : "Indicates if the physical card is blocked due to providing incorrect PINs."
        },
        "deliveryAddress" : {
          "$ref" : "#/definitions/DeliveryAddress"
        },
        "deliveryMethod" : {
          "$ref" : "#/definitions/DeliveryMethod"
        },
        "pendingActivation" : {
          "type" : "boolean",
          "description" : "Indicates if the physical card is activated for physical usage such as with physical terminals."
        },
        "manufacturingState" : {
          "$ref" : "#/definitions/ManufacturingState"
        },
        "carrierType" : {
          "type" : "string"
        },
        "productReference" : {
          "type" : "string",
          "description" : "The unique reference indicating the configuration of the physical card. Example the card design."
        },
        "replacement" : {
          "type" : "object",
          "description" : "Indicates if the physical card is replaced by another card.",
          "properties" : {
            "replacementReason" : {
              "type" : "string",
              "description" : "The reason why the physical card was replaced.\n  - DAMAGED: The physical card was damaged and cannot be used at a physical terminal.\n  - LOST_STOLEN: The physical card was either lost or stolen and cannot be used.\n  - EXPIRED: The physical card expired.\n",
              "enum" : [ "DAMAGED", "LOST_STOLEN", "EXPIRED" ]
            },
            "replacementId" : {
              "type" : "string",
              "description" : "The unique identifier of the new card that replaces this card.",
              "pattern" : "^[0-9]+$"
            }
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.PhysicalCardDetails"
    },
    "DeliveryAddress" : {
      "required" : [ "addressLine1", "city", "country", "name", "postCode", "surname" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "maxLength" : 20
        },
        "surname" : {
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "maxLength" : 100
        },
        "addressLine1" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "addressLine2" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "postCode" : {
          "type" : "string",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "description" : "The delivery address where the physical card is delivered.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.DeliveryAddress"
    },
    "ManagedAccount" : {
      "required" : [ "balances", "creationTimestamp", "currency", "friendlyName", "id", "profileId", "state" ],
      "properties" : {
        "balances" : {
          "$ref" : "#/definitions/ManagedInstrumentBalance"
        },
        "profileId" : {
          "type" : "string",
          "description" : "The Id of the Managed Account Profile that the managed account was created with.",
          "pattern" : "^[0-9]+$"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the managed account was created, expressed in Epoch timestamp using millisecond precision."
        },
        "currency" : {
          "type" : "string",
          "description" : "The currency of the managed account.",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]*$"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a Managed Account.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name given to the managed account.",
          "minLength" : 1,
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedAccount"
    },
    "DebitModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "availableToSpend" : {
            "type" : "array",
            "description" : "The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval.",
            "items" : {
              "$ref" : "#/definitions/AvailableToSpend"
            }
          },
          "parentManagedAccountId" : {
            "type" : "string",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "pattern" : "^[0-9]+$"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.DebitModeCard"
    },
    "OutgoingWireTransferBeneficiary" : {
      "required" : [ "bankAccountDetails", "name" ],
      "properties" : {
        "address" : {
          "type" : "string",
          "description" : "The beneficiary's address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankAccountDetails" : {
          "type" : "object",
          "description" : "Details of the benericiary bank account, depending on the type of transfer chosen."
        },
        "name" : {
          "type" : "string",
          "description" : "The beneficiary's full name.",
          "maxLength" : 200
        },
        "bankName" : {
          "type" : "string",
          "description" : "The beneficiary's bank name."
        },
        "bankAddress" : {
          "type" : "string",
          "description" : "The beneficiary's bank address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankCountry" : {
          "type" : "string",
          "description" : "The beneficiary's bank country."
        }
      },
      "type" : "object",
      "description" : "Details of the beneficiary of the outgoing wire transfer.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.OutgoingWireTransferBeneficiary"
    },
    "SensitiveCardNumber" : {
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 16
        }
      },
      "type" : "object",
      "description" : "The full card number of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card number will be tokenised.\n\nTo show the full unredacted card number to your user, you need to embed the Card number UI Component in your application. This accepts the tokenised card number and shows the unredacted card number to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SensitiveCardNumber"
    },
    "ManagedInstrumentState" : {
      "required" : [ "state" ],
      "properties" : {
        "destroyedReason" : {
          "$ref" : "#/definitions/DestroyedReason"
        },
        "blockedReason" : {
          "$ref" : "#/definitions/BlockedReason"
        },
        "state" : {
          "$ref" : "#/definitions/InstrumentState"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedInstrumentState"
    },
    "ManagedAccountIBAN" : {
      "required" : [ "bankAccountDetails", "state" ],
      "properties" : {
        "bankAccountDetails" : {
          "type" : "array",
          "description" : "A list of bank account details associated with the IBAN.\nMultiple details can be provided if multiple IBAN providers are supported by your payment model.",
          "items" : {
            "type" : "object",
            "properties" : {
              "beneficiaryBank" : {
                "type" : "string",
                "description" : "The beneficiary bank name to be used when initiating a deposit onto the IBAN."
              },
              "beneficiaryNameAndSurname" : {
                "type" : "string",
                "description" : "The beneficiary name and surname details to be used when initiating a deposit onto the IBAN."
              },
              "paymentReference" : {
                "type" : "string",
                "description" : "A reference required by the partner bank to execute a deposit on the managed account.\n\n\nIf provided, make sure that this is included as part of the wire transfer details when initiating a deposit.\n"
              },
              "beneficiaryBankAddress" : {
                "type" : "string",
                "description" : "The beneficiary bank address to be used when initiating a deposit onto the IBAN."
              },
              "details" : {
                "type" : "object",
                "description" : "The bank details required to initiate a deposit on the managed account.\n\nThe details required to deposit on the IBAN vary depending on the wire transfer channel that will be used.\n"
              }
            }
          }
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the Managed Account's IBAN as follows:\n  - UNALLOCATED: The Managed Account has never been assigned an IBAN. Use the _managedAccountsIBANUpgrade_ operation to assign an IBAN to a Managed Account.\n  - PENDING_ALLOCATION: The IBAN is being allocated to the Managed Account.\n  - ALLOCATED: An IBAN is allocated to the Managed Account.\n",
          "enum" : [ "UNALLOCATED", "PENDING_ALLOCATION", "ALLOCATED" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedAccountIBAN"
    },
    "ScaledAmount" : {
      "properties" : {
        "scale" : {
          "type" : "integer",
          "format" : "int32"
        },
        "value" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "type" : "object",
      "description" : "A floating point number, represented as a value and its scale. Its actual value can be obtained using the equation: value * pow(10, -scale).",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ScaledAmount"
    },
    "LegalAddress" : {
      "required" : [ "addressLine1", "city", "country" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "maxLength" : 20
        },
        "addressLine1" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "addressLine2" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "postCode" : {
          "type" : "string",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.LegalAddress"
    },
    "ManagedCard" : {
      "required" : [ "cardBrand", "cardLevelClassification", "cardholderMobileNumber", "creationTimestamp", "currency", "expiryPeriodMonths", "externalHandle", "friendlyName", "id", "mode", "nameOnCard", "profileId", "renewalType", "type" ],
      "properties" : {
        "cvv" : {
          "$ref" : "#/definitions/SensitiveCvv"
        },
        "expiryMmyy" : {
          "type" : "string",
          "description" : "The end date of this card, in MMYY format.",
          "minLength" : 4,
          "maxLength" : 4
        },
        "renewalType" : {
          "type" : "string",
          "description" : "Indicates how card will be handled once it is close to expiring.\n  - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.\n  - NO_RENEW: Once the expiry date is reached, the card is destroyed.\n",
          "enum" : [ "AUTO_RENEW", "NO_RENEW" ]
        },
        "externalHandle" : {
          "type" : "string",
          "description" : "A uniquely generated code used to identify a card.\n\nThis code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket.\n"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of card:\n  - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.\n  - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals.\n",
          "enum" : [ "VIRTUAL", "PHYSICAL" ]
        },
        "cardholderMobileNumber" : {
          "type" : "string",
          "description" : "The mobile number including country code of the card holder, needed for 3DS challenge.",
          "minLength" : 5,
          "maxLength" : 20,
          "pattern" : "^\\+[0-9]+$"
        },
        "startMmyy" : {
          "type" : "string",
          "description" : "The start date of this card, in MMYY format.",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^[0-9]*$"
        },
        "mode" : {
          "type" : "string",
          "description" : "The mode with which this card was created:\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"
        },
        "physicalCardDetails" : {
          "$ref" : "#/definitions/PhysicalCardDetails"
        },
        "cardNumberLastFour" : {
          "type" : "string",
          "description" : "The last four digits of the card number.",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^[0-9]*$"
        },
        "nameOnCard" : {
          "type" : "string",
          "description" : "The name on card. If the card is a physical card, this is printed on the card.",
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9äöüÄÖÜ\\\\\\-^. ']*$"
        },
        "profileId" : {
          "type" : "string",
          "description" : "The card profile identifier used to create the card.",
          "pattern" : "^[0-9]+$"
        },
        "cardNumberFirstSix" : {
          "type" : "string",
          "description" : "The first six digits of the card number.",
          "minLength" : 6,
          "maxLength" : 6,
          "pattern" : "^[0-9]*$"
        },
        "cardLevelClassification" : {
          "type" : "string",
          "description" : "The card classification determines whether the card is from Consumer or Corporate BINs.",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision."
        },
        "currency" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 3,
          "pattern" : "^[A-Z]*$"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of the card.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "billingAddress" : {
          "type" : "object"
        },
        "cardBrand" : {
          "type" : "string",
          "description" : "The card scheme, or brand of the card.",
          "enum" : [ "MASTERCARD", "VISA" ]
        },
        "expiryPeriodMonths" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The validity timeframe of the card, in months."
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name given to the card.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "cardNumber" : {
          "$ref" : "#/definitions/SensitiveCardNumber"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedCard"
    },
    "SensitivePassword" : {
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "type" : "string",
          "format" : "password"
        }
      },
      "type" : "object",
      "description" : "The user's password or passcode used to log in a user.\nPasswords must be:\n  - between 8 and 30 characters\n  - include a lowercase character\n  - include an uppercase character\n  - include a digit and a special character\n  - different from any of the 5 last such passwords used.\n\nFor non-PCI compliant integrations, the password submitted must be **tokenised**.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.SensitivePassword"
    },
    "PrepaidModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "properties" : {
          "balances" : {
            "$ref" : "#/definitions/ManagedInstrumentBalance"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.PrepaidModeCard"
    },
    "DeliveryMethod" : {
      "type" : "string",
      "description" : "The delivery methods supported for delivering printed physical cards. If not specified, the STANDARD_DELIVERY method will be used.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.DeliveryMethod"
    },
    "BlockedReason" : {
      "type" : "string",
      "description" : "The reason why the instrument has been blocked:\n  - USER: The root, or an authorised user, of the identity owning the instrument has temporarily blocked the instrument.\n  - SYSTEM: The platform or an administrator of the platform has temporarily blocked the instrument.\n  - LOST: The instrument has been blocked because it was marked as lost.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.BlockedReason"
    },
    "ConsumerRootUser" : {
      "required" : [ "active", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "emailVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's email has been verified."
        },
        "occupation" : {
          "type" : "object"
        },
        "address" : {
          "type" : "object"
        },
        "nationality" : {
          "type" : "string",
          "description" : "Nationality of the consumer root user - using ISO 3166 alpha-2.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "surname" : {
          "type" : "string",
          "description" : "Last name of the root user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "First name of the root user.",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the root user. If false, then the user will not be able to log in."
        },
        "mobileNumberVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's mobile number has been verified."
        },
        "dateOfBirth" : {
          "type" : "object"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the root user. When logging in, the email is used as the username of the user.",
          "minLength" : 6,
          "maxLength" : 255,
          "pattern" : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ConsumerRootUser"
    },
    "ManagedCardRequest" : {
      "required" : [ "billingAddress", "cardholderMobileNumber", "friendlyName", "mode", "nameOnCard", "profileId" ],
      "properties" : {
        "mode" : {
          "type" : "string",
          "description" : "The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"
        },
        "nameOnCard" : {
          "type" : "string",
          "description" : "The card holder's name for the card.\n\nThis may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.\n",
          "minLength" : 1,
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9äöüÄÖÜ\\\\\\-^. ']*$"
        },
        "profileId" : {
          "type" : "string",
          "description" : "The Managed Card Profile Id to be used to create the Managed Card.\n\nProfiles contain configuration and determine behavioral aspects of the newly created Managed Card, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\"\n",
          "pattern" : "^[0-9]*$"
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag field is a custom field that can be used to search and filter.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$"
        },
        "billingAddress" : {
          "type" : "object"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name for the card.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "cardholderMobileNumber" : {
          "type" : "string",
          "description" : "The mobile number including country code of the card holder.\n\nFor transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase.\n",
          "minLength" : 5,
          "maxLength" : 20,
          "pattern" : "^\\+[0-9]+$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManagedCardRequest"
    },
    "Statement" : {
      "properties" : {
        "entry" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatementEntry"
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of records (excluding the paging limit)."
        },
        "responseCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of records returned in this response."
        }
      },
      "type" : "object",
      "description" : "The list of statement entries.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Statement"
    },
    "Fee" : {
      "required" : [ "feeType", "source" ],
      "properties" : {
        "source" : {
          "type" : "object"
        },
        "feeType" : {
          "type" : "string",
          "description" : "The fee type as defined in the Multi Portal."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Fee"
    },
    "StatementEntry" : {
      "required" : [ "processedTimestamp", "transactionAmount", "transactionId" ],
      "properties" : {
        "originalAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "forexRate" : {
          "$ref" : "#/definitions/ScaledAmount"
        },
        "additionalFields" : {
          "type" : "object",
          "description" : "A Map of additional fields related to the transaction, containing for example fee information.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "cardholderFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "processedTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the transaction was processed by the system, expressed in Epoch timestamp using millisecond precision."
        },
        "balanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "sourceAmount" : {
          "type" : "object"
        },
        "transactionId" : {
          "$ref" : "#/definitions/TransactionId"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.StatementEntry"
    },
    "Error" : {
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Error"
    },
    "CorporateSourceOfFunds" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.CorporateSourceOfFunds"
    },
    "VerificationMobileResponse" : {
      "properties" : {
        "retriesLeft" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of retries left."
        },
        "timeLeftForRetry" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timestamp after which another verification code can be sent, expressed in Epoch timestamp using millisecond precision."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.VerificationMobileResponse"
    },
    "Mobile" : {
      "required" : [ "countryCode", "number" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "description" : "The mobile number of the Corporate's root user - excluding country code.",
          "minLength" : 1,
          "maxLength" : 15,
          "pattern" : "^[0-9]+$"
        },
        "countryCode" : {
          "type" : "string",
          "description" : "The country code of the Corporate's root user mobile number (e.g. +44).",
          "minLength" : 1,
          "maxLength" : 6
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Mobile"
    },
    "Date" : {
      "properties" : {
        "month" : {
          "type" : "integer",
          "format" : "int32"
        },
        "year" : {
          "type" : "integer",
          "format" : "int32"
        },
        "day" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.Date"
    },
    "IdentityId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier for the identity.",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "description" : "Indicates the identity type.",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.IdentityId"
    },
    "ManufacturingState" : {
      "type" : "string",
      "description" : "Information on the manufacturing of the physical card, as follows:\n  - REQUESTED: The upgrade of the card to physical has been requested.\n  - SENT_FOR_FULFILLMENT - The card has been sent for printing.\n  - DISPATCHED: The card has been manufactured and dispatched.\n  - DELIVERED: The card has been received and activated by the recipient.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.ManufacturingState"
    },
    "FasterPaymentsBankDetails" : {
      "required" : [ "accountNumber", "sortCode" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "description" : "Account number, required for wire transfer over Faster Payments."
        },
        "sortCode" : {
          "type" : "string",
          "description" : "Sort code, required for wire transfer over Faster Payments."
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over Faster Payments.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.weavrbank.weavrLogin.FasterPaymentsBankDetails"
    }
  },
  "parameters" : {
    "idempotency-ref" : {
      "name" : "idempotency-ref",
      "in" : "header",
      "description" : "A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours.",
      "required" : false,
      "type" : "string"
    },
    "accept" : {
      "name" : "accept",
      "in" : "header",
      "description" : "A request parameter specifying the type of response the client would like. In case this is not specified or specified incorrectly, the default response type (application/json) will be used.",
      "required" : false,
      "type" : "string"
    }
  },
  "responses" : {
    "NoContent" : {
      "description" : "Success - No Content."
    },
    "Unauthorized" : {
      "description" : "Unauthorized - Your credentials or access token are invalid."
    },
    "Forbidden" : {
      "description" : "Forbidden - Access to the requested resource or action is forbidden."
    },
    "ServiceUnavailable" : {
      "description" : "Service Unavailable - We're temporarily offline for maintenance. Please try again later."
    },
    "BadRequestError" : {
      "description" : "Bad Request Error - Your request is invalid.",
      "schema" : {
        "type" : "object",
        "properties" : {
          "syntaxErrors" : {
            "$ref" : "#/definitions/SyntaxError"
          },
          "message" : {
            "type" : "string",
            "description" : "When present helps to identify and fix the problem.",
            "maxLength" : 255
          }
        }
      }
    },
    "InternalServerError" : {
      "description" : "Internal Server Error - There is a problem with the server. Please try again later."
    },
    "NotFound" : {
      "description" : "Not found - The requested resource couldn't be found.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}