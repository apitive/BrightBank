package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;
import com.weavrbank.weavrLogin.model.Error;
import com.weavrbank.weavrLogin.model.InlineResponse20011;
import com.weavrbank.weavrLogin.model.InlineResponse40913;
import com.weavrbank.weavrLogin.model.InlineResponse40920;
import com.weavrbank.weavrLogin.model.InlineResponse40921;
import com.weavrbank.weavrLogin.model.InlineResponse40925;
import com.weavrbank.weavrLogin.model.InlineResponse40926;
import com.weavrbank.weavrLogin.model.InlineResponse40930;
import com.weavrbank.weavrLogin.model.InviteConsumeBody;
import com.weavrbank.weavrLogin.model.InviteValidateBody;
import com.weavrbank.weavrLogin.model.TokenResponse;
import com.weavrbank.weavrLogin.model.User;
import com.weavrbank.weavrLogin.model.UsersBody;
import com.weavrbank.weavrLogin.model.UsersUserIdBody;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface AuthorisedUsersService {

  /**
   * Activate user
   * Activate the user identified by the &#x60;user_id&#x60; path parameter.  By default, any new users created will be automatically activated. This operation needs to be used only if the user was previously de-activated using the _userDeactivate_ operation, or if the user was de-activated automatically after multiple incorrect login attempts. 
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /users/{user_id}/activate")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void userActivate(@Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Create user
   * Creates a user linked to the logged-in corporate or consumer identity.  Once on-boarded, users have access to all instruments (cards and accounts) of the identity.  Application-specific permissions to limit what each user can view and do need to be implemented in your application. 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return User
   */
  @RequestLine("POST /users")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  User userCreate(UsersBody body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Deactivate user
   * De-activate the user identified by the &#x60;user_id&#x60; path parameter.  Deactivated users cannot log in or execute any operations with their credentials.  This operations is not final and a user can be re-activated using the userActivate operation. Note that another active user would need to log in so as to re-activate the de-activated user. 
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /users/{user_id}/deactivate")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void userDeactivate(@Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Get user
   * Retrieves the user identified by the &#x60;user_id&#x60; path parameter.
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return User
   */
  @RequestLine("GET /users/{user_id}")
  @Headers({
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  User userGetById(@Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Consume user invite
   * Consumes an invitation perviously sent to the user via _userInviteSend_. This is needed so that the invited user sets up the password.  In the Sandbox environment, the &#x60;inviteCode&#x60; will always be 123456. 
    * @param body  (required)
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return TokenResponse
   */
  @RequestLine("POST /users/{user_id}/invite/consume")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  TokenResponse userInviteConsume(InviteConsumeBody body, @Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Send user invite
   * Once a user is created using the _userCreate_ operation, the user needs to setup his/her password.  An invitation needs to be sent to the user in order to be able to set up the password for the first time. The invitation email, which remains valid for 1 month, will contain a URL having all information required to setup the password via the _userInviteConsume_. 
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /users/{user_id}/invite")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void userInviteSend(@Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Validate user invite
   * Check if a user&#x27;s invite is still valid. This operation is useful to avoid having the user fill in a form only to be held by a validation issue (eg. expired invite).
    * @param body  (required)
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /users/{user_id}/invite/validate")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void userInviteValidate(InviteValidateBody body, @Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Update user
   * Update the details of a user identified by the &#x60;user_id&#x60; in the the path parameter.  Only the fields that are specified in the request body will be updated. All other fields will remain unchanged. 
    * @param body  (required)
    * @param user_id The unique identifier for the user. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return User
   */
  @RequestLine("PATCH /users/{user_id}")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  User userUpdate(UsersUserIdBody body, @Param("user_id") String user_id, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Get users
   * Fetches all authorised users associated with the corporate or consumer identity the logged-in user belongs to.
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
    * @param paging The offset and number of results to return. Leave out to fetch the first page of results. (optional)
    * @param active Filter for active or deactivated users. Leave out to fetch all users. (optional)
    * @param email Filter by the email address of the user. (optional)
   * @return InlineResponse20011
   */
  @RequestLine("GET /users?paging={paging}&active={active}&email={email}")
  @Headers({
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  InlineResponse20011 usersGet(@Param("idempotency_ref") String idempotency_ref, @Param("paging") Object paging, @Param("active") Boolean active, @Param("email") String email);


    /**
     * Get users
     * Fetches all authorised users associated with the corporate or consumer identity the logged-in user belongs to.
     * Note, this is equivalent to the other <code>usersGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link UsersGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>paging - The offset and number of results to return. Leave out to fetch the first page of results. (optional)</li>
     *   <li>active - Filter for active or deactivated users. Leave out to fetch all users. (optional)</li>
     *   <li>email - Filter by the email address of the user. (optional)</li>
     *   </ul>
     * @return InlineResponse20011
     */
    @RequestLine("GET /users?paging={paging}&active={active}&email={email}")
    @Headers({
    "Accept: application/json",
        "idempotency-ref: {idempotency_ref}"    })
    InlineResponse20011 usersGet
    (@Param("idempotency_ref") String idempotency_ref, @QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

}
