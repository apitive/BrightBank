package com.weavrbank.weavrLogin.service;


import com.weavrbank.weavrLogin.model.*;
import com.weavrbank.weavrLogin.model.Consumer;
import com.weavrbank.weavrLogin.model.ConsumersBody;
import com.weavrbank.weavrLogin.model.ConsumersBody1;
import com.weavrbank.weavrLogin.model.EmailSendBody;
import com.weavrbank.weavrLogin.model.EmailVerifyBody1;
import com.weavrbank.weavrLogin.model.Error;
import com.weavrbank.weavrLogin.model.FeesChargeBody;
import com.weavrbank.weavrLogin.model.InlineResponse2004;
import com.weavrbank.weavrLogin.model.InlineResponse2005;
import com.weavrbank.weavrLogin.model.InlineResponse40911;
import com.weavrbank.weavrLogin.model.InlineResponse40915;
import com.weavrbank.weavrLogin.model.InlineResponse40918;
import com.weavrbank.weavrLogin.model.InlineResponse40929;
import com.weavrbank.weavrLogin.model.InlineResponse4093;
import com.weavrbank.weavrLogin.model.InlineResponse4095;
import com.weavrbank.weavrLogin.model.InlineResponse4097;
import com.weavrbank.weavrLogin.model.InlineResponse4098;
import com.weavrbank.weavrLogin.model.MobileVerifyBody;
import com.weavrbank.weavrLogin.model.VerificationMobileResponse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface ConsumersService {

  /**
   * Charge fee to consumer
   * Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.  The fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal. 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers/fees/charge")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerChargeFee(FeesChargeBody body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Create consumer
   * Create a Consumer Identity to represent an Individual.  The information provided must be accurate as it will be passed on for KYC verification with our partner.  *Incorrect information may incur a re-processing fee.* 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return Consumer
   */
  @RequestLine("POST /consumers")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  Consumer consumerCreate(ConsumersBody body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Get consumer
   * Retrieve the details of the logged-in Consumer.
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return Consumer
   */
  @RequestLine("GET /consumers")
  @Headers({
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  Consumer consumerGet(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Get consumer KYC
   * Returns the KYC status for the logged-in consumer.
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return InlineResponse2004
   */
  @RequestLine("GET /consumers/kyc")
  @Headers({
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  InlineResponse2004 consumerKycGet(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Start consumer KYC
   * Consumers need to complete due diligence (KYC) before they can create instruments and fund transaction.  This operation initiates the due diligence process for the logged-in consumer.  Due Diligence is handled by a KYB provider, you will need to embed the KYC UI Component in your application to show the KYC screens to your users.  To initialise the KYC UI Component, you need a &#x60;reference&#x60; that is given you in the response of this operation. 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return InlineResponse2005
   */
  @RequestLine("POST /consumers/kyc")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  InlineResponse2005 consumerKycStart(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Send root user email verification code
   * The first step in verifying a root user&#x27;s email. The root user whose email address is to be verified is sent an email containing a randomly generated code.  This code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user&#x27;s email address.  Note that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\&quot;123456\\\&quot;. 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers/verification/email/send")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerRootUserEmailVerificationCodeSend(EmailSendBody body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Verify root user email
   * The second step in verifying the root user&#x27;s email. The randomly generated code sent to the root user via email, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user&#x27;s email. This is needed as part of the verification process for basic due diligence. Note that on the Sandbox Environment, emails are not sent and the verification code is always set to \&quot;123456\&quot;.
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers/verification/email/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerRootUserEmailVerify(EmailVerifyBody1 body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Send root user mobile verification code
   * The first step in verifying a root user&#x27;s mobile number. The root user whose mobile number is to be verified is sent a text message containing a randomly generated code.  This code must then be provided in the _consumerRootUserMobileVerify_ operation to verify the root user&#x27;s mobile number.  Note that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\&quot;123456\\\&quot;. 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return VerificationMobileResponse
   */
  @RequestLine("POST /consumers/verification/mobile/send")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  VerificationMobileResponse consumerRootUserMobileVerificationCodeSend(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Verify root user mobile
   * The second step in verifying the root user&#x27;s mobile number. The randomly generated code sent to the root user via text message, using the _consumerRootUserMobileVerificationCodeSend_ operation, is to be submitted here to verify the root user&#x27;s mobile number.  This is needed as part of the verification process for basic due diligence.  Note that on the Sandbox Environment, text messages are not sent and the verification code is always set to \\\&quot;123456\\\&quot; 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers/verification/mobile/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerRootUserMobileVerify(MobileVerifyBody body, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Update consumer
   * Update the details of the logged-in consumer identity.  If the Consumer root user has already completed KYC, the following details cannot be updated:   - name   - surname   - email   - mobile Country Code   - mobile Number   - date of Birth   - address 
    * @param body  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations.  Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   * @return Consumer
   */
  @RequestLine("PATCH /consumers")
  @Headers({
    "Content-Type: application/json",
    "Accept: application/json",
    "idempotency-ref: {idempotency_ref}"  })
  Consumer consumerUpdate(ConsumersBody1 body, @Param("idempotency_ref") String idempotency_ref);

}
