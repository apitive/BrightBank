/*Generated by WaveMaker Studio*/

package com.custom.security;

import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.AuthenticationException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import com.wavemaker.runtime.rest.RequestContext;
import com.wavemaker.runtime.rest.RestExecutor;
import com.wavemaker.runtime.security.AuthRequestContext;
import com.wavemaker.runtime.security.WMCustomAuthenticationManager;
import com.wavemaker.runtime.security.WMUser;
import com.weavrbank.weavrLogin.model.InlineResponse20010;
import com.weavrbank.weavrLogin.model.InlineResponse2009;
import com.weavrbank.weavrLogin.model.LoginWithPasswordBody;
import com.weavrbank.weavrLogin.model.SensitivePassword;
import com.weavrbank.weavrLogin.model.UserIdCreateBody;
import com.weavrbank.weavrLogin.service.PasswordsService;
import com.weavrbank.weavrLogin.service.UserAuthenticationService;

public class CustomSecurity implements WMCustomAuthenticationManager {

    private static final Logger logger = LoggerFactory.getLogger(CustomSecurity.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private UserAuthenticationService loginService;

    @Autowired
    private PasswordsService passwordsService;

    @Autowired
    private RestExecutor restExecutor;

    @Value("${app.environment.apikey}")
    private String weavrAPIKey;

    public WMUser authenticate(AuthRequestContext authRequestContext) throws AuthenticationException {
        logger.info("----- Authentication start------");
        String username = authRequestContext.getUsername();
        String password = authRequestContext.getPassword();
        logger.info("----------User Details: " + username + " password: " + password);
        String userId = authRequestContext.getHttpServletRequest().getHeader("UserId");
        if (userId != null) {
            logger.info("---UserId: {}", userId);
            UserIdCreateBody passwordCreate = new UserIdCreateBody();
            SensitivePassword pwdInfo = new SensitivePassword();
            pwdInfo.setValue(password);
            passwordCreate.setPassword(pwdInfo);
            logger.info("--Request password constructed---");
            InlineResponse20010 response = restExecutor.executeWithContext(
                    RequestContext.Builder.newInstance().addHeader("api-key", weavrAPIKey).addHeader("Content-Type", "application/json").build(), () -> passwordsService.passwordCreate(passwordCreate, userId,
                            ""));
            logger.info("---Request invoked---");
            String id = JsonPath.parse(response.getPasswordInfo().getIdentityId()).read("$.id");
            String identity = JsonPath.parse(response.getPasswordInfo().getIdentityId()).read("$.type");
            List<String> roles = new LinkedList<>();
            roles.add(response.getToken());
            WMUser wmUser = new WMUser(identity, roles);
            wmUser.setUserId(id);
            wmUser.setCustomAttributes(new LinkedHashMap<String, Object>() {{
                put("userType", "NEW");
                put("authtoken", response.getToken());
            }});
            wmUser.setTenantId(1); // setting 1 as tenantId for new user login
            return wmUser;
        } else {
            LoginWithPasswordBody loginInfo = new LoginWithPasswordBody();
            loginInfo.setEmail(username);
            SensitivePassword passwordInfo = new SensitivePassword();
            passwordInfo.setValue(password);
            loginInfo.setPassword(passwordInfo);
            logger.info("-----Service info: " + loginInfo.toString() + weavrAPIKey);
            InlineResponse2009 response = restExecutor.executeWithContext(
                    RequestContext.Builder.newInstance().addHeader("api-key", weavrAPIKey).addHeader("Content-Type", "application/json").build(), () -> loginService.loginWithPassword(loginInfo, ""));
            String id = JsonPath.parse(response.getIdentity()).read("$.id");
            String identity = JsonPath.parse(response.getIdentity()).read("$.type");
            List<String> roles = new LinkedList<>();
            roles.add(response.getToken());
            WMUser wmUser = new WMUser(identity, roles);
            wmUser.setUserId(id);
            wmUser.setCustomAttributes(new LinkedHashMap<String, Object>() {{
                put("userType", "EXISTING");
                put("authtoken", response.getToken());
            }});
            wmUser.setTenantId(2);
            return wmUser;
        }
    }
}
